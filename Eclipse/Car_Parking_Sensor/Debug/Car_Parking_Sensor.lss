
Car_Parking_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000031a2  00003236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800084  00800084  0000325a  2**0
                  ALLOC
  3 .stab         00002868  00000000  00000000  0000325c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000103f  00000000  00000000  00005ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006c63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008e37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000aebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b03c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b2fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bb8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 38       	cpi	r26, 0x8B	; 139
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 40 15 	call	0x2a80	; 0x2a80 <main>
      8a:	0c 94 cf 18 	jmp	0x319e	; 0x319e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e7       	ldi	r26, 0x7C	; 124
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e7       	ldi	r24, 0x7C	; 124
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6f 18 	jmp	0x30de	; 0x30de <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e7       	ldi	r22, 0x7C	; 124
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Buzzer_init>:
#include "buzzer.h"
#include "gpio.h"

void Buzzer_init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
    GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	65 e0       	ldi	r22, 0x05	; 5
     caa:	41 e0       	ldi	r20, 0x01	; 1
     cac:	0e 94 78 06 	call	0xcf0	; 0xcf0 <GPIO_setupPinDirection>
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_OFF);
     cb0:	82 e0       	ldi	r24, 0x02	; 2
     cb2:	65 e0       	ldi	r22, 0x05	; 5
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
}
     cba:	cf 91       	pop	r28
     cbc:	df 91       	pop	r29
     cbe:	08 95       	ret

00000cc0 <Buzzer_on>:

void Buzzer_on(void)
{
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_ON);
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	65 e0       	ldi	r22, 0x05	; 5
     ccc:	41 e0       	ldi	r20, 0x01	; 1
     cce:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
}
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <Buzzer_off>:

void Buzzer_off(void)
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_OFF);
     ce0:	82 e0       	ldi	r24, 0x02	; 2
     ce2:	65 e0       	ldi	r22, 0x05	; 5
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
}
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	08 95       	ret

00000cf0 <GPIO_setupPinDirection>:
#include "gpio.h"
#include "common_macros.h"
#include <avr/io.h>

void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     cf0:	df 93       	push	r29
     cf2:	cf 93       	push	r28
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	2d 97       	sbiw	r28, 0x0d	; 13
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
     d04:	89 83       	std	Y+1, r24	; 0x01
     d06:	6a 83       	std	Y+2, r22	; 0x02
     d08:	4b 83       	std	Y+3, r20	; 0x03
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	88 30       	cpi	r24, 0x08	; 8
     d0e:	08 f0       	brcs	.+2      	; 0xd12 <GPIO_setupPinDirection+0x22>
     d10:	db c0       	rjmp	.+438    	; 0xec8 <GPIO_setupPinDirection+0x1d8>
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	84 30       	cpi	r24, 0x04	; 4
     d16:	08 f0       	brcs	.+2      	; 0xd1a <GPIO_setupPinDirection+0x2a>
     d18:	d7 c0       	rjmp	.+430    	; 0xec8 <GPIO_setupPinDirection+0x1d8>
		return;

	switch (port_num)
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	3d 87       	std	Y+13, r19	; 0x0d
     d22:	2c 87       	std	Y+12, r18	; 0x0c
     d24:	8c 85       	ldd	r24, Y+12	; 0x0c
     d26:	9d 85       	ldd	r25, Y+13	; 0x0d
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	91 05       	cpc	r25, r1
     d2c:	09 f4       	brne	.+2      	; 0xd30 <GPIO_setupPinDirection+0x40>
     d2e:	44 c0       	rjmp	.+136    	; 0xdb8 <GPIO_setupPinDirection+0xc8>
     d30:	2c 85       	ldd	r18, Y+12	; 0x0c
     d32:	3d 85       	ldd	r19, Y+13	; 0x0d
     d34:	22 30       	cpi	r18, 0x02	; 2
     d36:	31 05       	cpc	r19, r1
     d38:	2c f4       	brge	.+10     	; 0xd44 <GPIO_setupPinDirection+0x54>
     d3a:	8c 85       	ldd	r24, Y+12	; 0x0c
     d3c:	9d 85       	ldd	r25, Y+13	; 0x0d
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	71 f0       	breq	.+28     	; 0xd5e <GPIO_setupPinDirection+0x6e>
     d42:	c2 c0       	rjmp	.+388    	; 0xec8 <GPIO_setupPinDirection+0x1d8>
     d44:	2c 85       	ldd	r18, Y+12	; 0x0c
     d46:	3d 85       	ldd	r19, Y+13	; 0x0d
     d48:	22 30       	cpi	r18, 0x02	; 2
     d4a:	31 05       	cpc	r19, r1
     d4c:	09 f4       	brne	.+2      	; 0xd50 <GPIO_setupPinDirection+0x60>
     d4e:	62 c0       	rjmp	.+196    	; 0xe14 <GPIO_setupPinDirection+0x124>
     d50:	8c 85       	ldd	r24, Y+12	; 0x0c
     d52:	9d 85       	ldd	r25, Y+13	; 0x0d
     d54:	83 30       	cpi	r24, 0x03	; 3
     d56:	91 05       	cpc	r25, r1
     d58:	09 f4       	brne	.+2      	; 0xd5c <GPIO_setupPinDirection+0x6c>
     d5a:	89 c0       	rjmp	.+274    	; 0xe6e <GPIO_setupPinDirection+0x17e>
     d5c:	b5 c0       	rjmp	.+362    	; 0xec8 <GPIO_setupPinDirection+0x1d8>
	{
	case PORTA_ID:
		(direction == PIN_OUTPUT) ? SET_BIT(DDRA, pin_num) : CLEAR_BIT(DDRA, pin_num);
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	81 30       	cpi	r24, 0x01	; 1
     d62:	a9 f4       	brne	.+42     	; 0xd8e <GPIO_setupPinDirection+0x9e>
     d64:	aa e3       	ldi	r26, 0x3A	; 58
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	ea e3       	ldi	r30, 0x3A	; 58
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 2e       	mov	r0, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <GPIO_setupPinDirection+0x92>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <GPIO_setupPinDirection+0x8e>
     d86:	84 2b       	or	r24, r20
     d88:	8c 93       	st	X, r24
     d8a:	9c 91       	ld	r25, X
     d8c:	9d c0       	rjmp	.+314    	; 0xec8 <GPIO_setupPinDirection+0x1d8>
     d8e:	aa e3       	ldi	r26, 0x3A	; 58
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	ea e3       	ldi	r30, 0x3A	; 58
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <GPIO_setupPinDirection+0xba>
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	2a 95       	dec	r18
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <GPIO_setupPinDirection+0xb6>
     dae:	80 95       	com	r24
     db0:	84 23       	and	r24, r20
     db2:	8c 93       	st	X, r24
     db4:	2c 91       	ld	r18, X
     db6:	88 c0       	rjmp	.+272    	; 0xec8 <GPIO_setupPinDirection+0x1d8>
		break;
	case PORTB_ID:
		(direction == PIN_OUTPUT) ? SET_BIT(DDRB, pin_num) : CLEAR_BIT(DDRB, pin_num);
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	a9 f4       	brne	.+42     	; 0xde8 <GPIO_setupPinDirection+0xf8>
     dbe:	a7 e3       	ldi	r26, 0x37	; 55
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e7 e3       	ldi	r30, 0x37	; 55
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <GPIO_setupPinDirection+0xec>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <GPIO_setupPinDirection+0xe8>
     de0:	84 2b       	or	r24, r20
     de2:	8c 93       	st	X, r24
     de4:	3c 91       	ld	r19, X
     de6:	70 c0       	rjmp	.+224    	; 0xec8 <GPIO_setupPinDirection+0x1d8>
     de8:	a7 e3       	ldi	r26, 0x37	; 55
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e7 e3       	ldi	r30, 0x37	; 55
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	48 2f       	mov	r20, r24
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	02 2e       	mov	r0, r18
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <GPIO_setupPinDirection+0x116>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	0a 94       	dec	r0
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <GPIO_setupPinDirection+0x112>
     e0a:	80 95       	com	r24
     e0c:	84 23       	and	r24, r20
     e0e:	8c 93       	st	X, r24
     e10:	8c 91       	ld	r24, X
     e12:	5a c0       	rjmp	.+180    	; 0xec8 <GPIO_setupPinDirection+0x1d8>
		break;
	case PORTC_ID:
		(direction == PIN_OUTPUT) ? SET_BIT(DDRC, pin_num) : CLEAR_BIT(DDRC, pin_num);
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	a9 f4       	brne	.+42     	; 0xe44 <GPIO_setupPinDirection+0x154>
     e1a:	a4 e3       	ldi	r26, 0x34	; 52
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e4 e3       	ldi	r30, 0x34	; 52
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	48 2f       	mov	r20, r24
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <GPIO_setupPinDirection+0x148>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <GPIO_setupPinDirection+0x144>
     e3c:	84 2b       	or	r24, r20
     e3e:	8c 93       	st	X, r24
     e40:	9c 91       	ld	r25, X
     e42:	42 c0       	rjmp	.+132    	; 0xec8 <GPIO_setupPinDirection+0x1d8>
     e44:	a4 e3       	ldi	r26, 0x34	; 52
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e4 e3       	ldi	r30, 0x34	; 52
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	48 2f       	mov	r20, r24
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <GPIO_setupPinDirection+0x170>
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	2a 95       	dec	r18
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <GPIO_setupPinDirection+0x16c>
     e64:	80 95       	com	r24
     e66:	84 23       	and	r24, r20
     e68:	8c 93       	st	X, r24
     e6a:	2c 91       	ld	r18, X
     e6c:	2d c0       	rjmp	.+90     	; 0xec8 <GPIO_setupPinDirection+0x1d8>
		break;
	case PORTD_ID:
		(direction == PIN_OUTPUT) ? SET_BIT(DDRD, pin_num) : CLEAR_BIT(DDRD, pin_num);
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	a9 f4       	brne	.+42     	; 0xe9e <GPIO_setupPinDirection+0x1ae>
     e74:	a1 e3       	ldi	r26, 0x31	; 49
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e1 e3       	ldi	r30, 0x31	; 49
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <GPIO_setupPinDirection+0x1a2>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <GPIO_setupPinDirection+0x19e>
     e96:	84 2b       	or	r24, r20
     e98:	8c 93       	st	X, r24
     e9a:	3c 91       	ld	r19, X
     e9c:	15 c0       	rjmp	.+42     	; 0xec8 <GPIO_setupPinDirection+0x1d8>
     e9e:	a1 e3       	ldi	r26, 0x31	; 49
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e1 e3       	ldi	r30, 0x31	; 49
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <GPIO_setupPinDirection+0x1cc>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <GPIO_setupPinDirection+0x1c8>
     ec0:	80 95       	com	r24
     ec2:	84 23       	and	r24, r20
     ec4:	8c 93       	st	X, r24
     ec6:	8c 91       	ld	r24, X
		break;
	}
}
     ec8:	2d 96       	adiw	r28, 0x0d	; 13
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <GPIO_writePin>:

void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	2d 97       	sbiw	r28, 0x0d	; 13
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	89 83       	std	Y+1, r24	; 0x01
     ef0:	6a 83       	std	Y+2, r22	; 0x02
     ef2:	4b 83       	std	Y+3, r20	; 0x03
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	88 30       	cpi	r24, 0x08	; 8
     ef8:	08 f0       	brcs	.+2      	; 0xefc <GPIO_writePin+0x22>
     efa:	db c0       	rjmp	.+438    	; 0x10b2 <GPIO_writePin+0x1d8>
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	84 30       	cpi	r24, 0x04	; 4
     f00:	08 f0       	brcs	.+2      	; 0xf04 <GPIO_writePin+0x2a>
     f02:	d7 c0       	rjmp	.+430    	; 0x10b2 <GPIO_writePin+0x1d8>
		return;

	switch (port_num)
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	3d 87       	std	Y+13, r19	; 0x0d
     f0c:	2c 87       	std	Y+12, r18	; 0x0c
     f0e:	8c 85       	ldd	r24, Y+12	; 0x0c
     f10:	9d 85       	ldd	r25, Y+13	; 0x0d
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	91 05       	cpc	r25, r1
     f16:	09 f4       	brne	.+2      	; 0xf1a <GPIO_writePin+0x40>
     f18:	44 c0       	rjmp	.+136    	; 0xfa2 <GPIO_writePin+0xc8>
     f1a:	2c 85       	ldd	r18, Y+12	; 0x0c
     f1c:	3d 85       	ldd	r19, Y+13	; 0x0d
     f1e:	22 30       	cpi	r18, 0x02	; 2
     f20:	31 05       	cpc	r19, r1
     f22:	2c f4       	brge	.+10     	; 0xf2e <GPIO_writePin+0x54>
     f24:	8c 85       	ldd	r24, Y+12	; 0x0c
     f26:	9d 85       	ldd	r25, Y+13	; 0x0d
     f28:	00 97       	sbiw	r24, 0x00	; 0
     f2a:	71 f0       	breq	.+28     	; 0xf48 <GPIO_writePin+0x6e>
     f2c:	c2 c0       	rjmp	.+388    	; 0x10b2 <GPIO_writePin+0x1d8>
     f2e:	2c 85       	ldd	r18, Y+12	; 0x0c
     f30:	3d 85       	ldd	r19, Y+13	; 0x0d
     f32:	22 30       	cpi	r18, 0x02	; 2
     f34:	31 05       	cpc	r19, r1
     f36:	09 f4       	brne	.+2      	; 0xf3a <GPIO_writePin+0x60>
     f38:	62 c0       	rjmp	.+196    	; 0xffe <GPIO_writePin+0x124>
     f3a:	8c 85       	ldd	r24, Y+12	; 0x0c
     f3c:	9d 85       	ldd	r25, Y+13	; 0x0d
     f3e:	83 30       	cpi	r24, 0x03	; 3
     f40:	91 05       	cpc	r25, r1
     f42:	09 f4       	brne	.+2      	; 0xf46 <GPIO_writePin+0x6c>
     f44:	89 c0       	rjmp	.+274    	; 0x1058 <GPIO_writePin+0x17e>
     f46:	b5 c0       	rjmp	.+362    	; 0x10b2 <GPIO_writePin+0x1d8>
	{
	case PORTA_ID:
		(value) ? SET_BIT(PORTA, pin_num) : CLEAR_BIT(PORTA, pin_num);
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	88 23       	and	r24, r24
     f4c:	a9 f0       	breq	.+42     	; 0xf78 <GPIO_writePin+0x9e>
     f4e:	ab e3       	ldi	r26, 0x3B	; 59
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	eb e3       	ldi	r30, 0x3B	; 59
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	48 2f       	mov	r20, r24
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	02 2e       	mov	r0, r18
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <GPIO_writePin+0x92>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	0a 94       	dec	r0
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <GPIO_writePin+0x8e>
     f70:	84 2b       	or	r24, r20
     f72:	8c 93       	st	X, r24
     f74:	9c 91       	ld	r25, X
     f76:	9d c0       	rjmp	.+314    	; 0x10b2 <GPIO_writePin+0x1d8>
     f78:	ab e3       	ldi	r26, 0x3B	; 59
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	eb e3       	ldi	r30, 0x3B	; 59
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <GPIO_writePin+0xba>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	2a 95       	dec	r18
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <GPIO_writePin+0xb6>
     f98:	80 95       	com	r24
     f9a:	84 23       	and	r24, r20
     f9c:	8c 93       	st	X, r24
     f9e:	2c 91       	ld	r18, X
     fa0:	88 c0       	rjmp	.+272    	; 0x10b2 <GPIO_writePin+0x1d8>
		break;
	case PORTB_ID:
		(value) ? SET_BIT(PORTB, pin_num) : CLEAR_BIT(PORTB, pin_num);
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	88 23       	and	r24, r24
     fa6:	a9 f0       	breq	.+42     	; 0xfd2 <GPIO_writePin+0xf8>
     fa8:	a8 e3       	ldi	r26, 0x38	; 56
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e8 e3       	ldi	r30, 0x38	; 56
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <GPIO_writePin+0xec>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <GPIO_writePin+0xe8>
     fca:	84 2b       	or	r24, r20
     fcc:	8c 93       	st	X, r24
     fce:	3c 91       	ld	r19, X
     fd0:	70 c0       	rjmp	.+224    	; 0x10b2 <GPIO_writePin+0x1d8>
     fd2:	a8 e3       	ldi	r26, 0x38	; 56
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e8 e3       	ldi	r30, 0x38	; 56
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <GPIO_writePin+0x116>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <GPIO_writePin+0x112>
     ff4:	80 95       	com	r24
     ff6:	84 23       	and	r24, r20
     ff8:	8c 93       	st	X, r24
     ffa:	8c 91       	ld	r24, X
     ffc:	5a c0       	rjmp	.+180    	; 0x10b2 <GPIO_writePin+0x1d8>
		break;
	case PORTC_ID:
		(value) ? SET_BIT(PORTC, pin_num) : CLEAR_BIT(PORTC, pin_num);
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	88 23       	and	r24, r24
    1002:	a9 f0       	breq	.+42     	; 0x102e <GPIO_writePin+0x154>
    1004:	a5 e3       	ldi	r26, 0x35	; 53
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e5 e3       	ldi	r30, 0x35	; 53
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <GPIO_writePin+0x148>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <GPIO_writePin+0x144>
    1026:	84 2b       	or	r24, r20
    1028:	8c 93       	st	X, r24
    102a:	9c 91       	ld	r25, X
    102c:	42 c0       	rjmp	.+132    	; 0x10b2 <GPIO_writePin+0x1d8>
    102e:	a5 e3       	ldi	r26, 0x35	; 53
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e5 e3       	ldi	r30, 0x35	; 53
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 c0       	rjmp	.+4      	; 0x104a <GPIO_writePin+0x170>
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	2a 95       	dec	r18
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <GPIO_writePin+0x16c>
    104e:	80 95       	com	r24
    1050:	84 23       	and	r24, r20
    1052:	8c 93       	st	X, r24
    1054:	2c 91       	ld	r18, X
    1056:	2d c0       	rjmp	.+90     	; 0x10b2 <GPIO_writePin+0x1d8>
		break;
	case PORTD_ID:
		(value) ? SET_BIT(PORTD, pin_num) : CLEAR_BIT(PORTD, pin_num);
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	88 23       	and	r24, r24
    105c:	a9 f0       	breq	.+42     	; 0x1088 <GPIO_writePin+0x1ae>
    105e:	a2 e3       	ldi	r26, 0x32	; 50
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e2 e3       	ldi	r30, 0x32	; 50
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	02 2e       	mov	r0, r18
    1076:	02 c0       	rjmp	.+4      	; 0x107c <GPIO_writePin+0x1a2>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	0a 94       	dec	r0
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <GPIO_writePin+0x19e>
    1080:	84 2b       	or	r24, r20
    1082:	8c 93       	st	X, r24
    1084:	3c 91       	ld	r19, X
    1086:	15 c0       	rjmp	.+42     	; 0x10b2 <GPIO_writePin+0x1d8>
    1088:	a2 e3       	ldi	r26, 0x32	; 50
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e2 e3       	ldi	r30, 0x32	; 50
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 2e       	mov	r0, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <GPIO_writePin+0x1cc>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <GPIO_writePin+0x1c8>
    10aa:	80 95       	com	r24
    10ac:	84 23       	and	r24, r20
    10ae:	8c 93       	st	X, r24
    10b0:	8c 91       	ld	r24, X
		break;
	}
}
    10b2:	2d 96       	adiw	r28, 0x0d	; 13
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <GPIO_readPin>:

uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	29 97       	sbiw	r28, 0x09	; 9
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	6a 83       	std	Y+2, r22	; 0x02
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	88 30       	cpi	r24, 0x08	; 8
    10e0:	18 f4       	brcc	.+6      	; 0x10e8 <GPIO_readPin+0x24>
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	84 30       	cpi	r24, 0x04	; 4
    10e6:	10 f0       	brcs	.+4      	; 0x10ec <GPIO_readPin+0x28>
		return LOGIC_LOW;
    10e8:	19 86       	std	Y+9, r1	; 0x09
    10ea:	8a c0       	rjmp	.+276    	; 0x1200 <GPIO_readPin+0x13c>

	switch (port_num)
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	38 87       	std	Y+8, r19	; 0x08
    10f4:	2f 83       	std	Y+7, r18	; 0x07
    10f6:	4f 81       	ldd	r20, Y+7	; 0x07
    10f8:	58 85       	ldd	r21, Y+8	; 0x08
    10fa:	41 30       	cpi	r20, 0x01	; 1
    10fc:	51 05       	cpc	r21, r1
    10fe:	89 f1       	breq	.+98     	; 0x1162 <GPIO_readPin+0x9e>
    1100:	8f 81       	ldd	r24, Y+7	; 0x07
    1102:	98 85       	ldd	r25, Y+8	; 0x08
    1104:	82 30       	cpi	r24, 0x02	; 2
    1106:	91 05       	cpc	r25, r1
    1108:	34 f4       	brge	.+12     	; 0x1116 <GPIO_readPin+0x52>
    110a:	2f 81       	ldd	r18, Y+7	; 0x07
    110c:	38 85       	ldd	r19, Y+8	; 0x08
    110e:	21 15       	cp	r18, r1
    1110:	31 05       	cpc	r19, r1
    1112:	69 f0       	breq	.+26     	; 0x112e <GPIO_readPin+0x6a>
    1114:	74 c0       	rjmp	.+232    	; 0x11fe <GPIO_readPin+0x13a>
    1116:	4f 81       	ldd	r20, Y+7	; 0x07
    1118:	58 85       	ldd	r21, Y+8	; 0x08
    111a:	42 30       	cpi	r20, 0x02	; 2
    111c:	51 05       	cpc	r21, r1
    111e:	d9 f1       	breq	.+118    	; 0x1196 <GPIO_readPin+0xd2>
    1120:	8f 81       	ldd	r24, Y+7	; 0x07
    1122:	98 85       	ldd	r25, Y+8	; 0x08
    1124:	83 30       	cpi	r24, 0x03	; 3
    1126:	91 05       	cpc	r25, r1
    1128:	09 f4       	brne	.+2      	; 0x112c <GPIO_readPin+0x68>
    112a:	4f c0       	rjmp	.+158    	; 0x11ca <GPIO_readPin+0x106>
    112c:	68 c0       	rjmp	.+208    	; 0x11fe <GPIO_readPin+0x13a>
	{
	case PORTA_ID:
		return BIT_IS_SET(PINA, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
    112e:	e9 e3       	ldi	r30, 0x39	; 57
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	88 2f       	mov	r24, r24
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	a9 01       	movw	r20, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <GPIO_readPin+0x82>
    1142:	55 95       	asr	r21
    1144:	47 95       	ror	r20
    1146:	8a 95       	dec	r24
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <GPIO_readPin+0x7e>
    114a:	ca 01       	movw	r24, r20
    114c:	81 70       	andi	r24, 0x01	; 1
    114e:	90 70       	andi	r25, 0x00	; 0
    1150:	88 23       	and	r24, r24
    1152:	19 f0       	breq	.+6      	; 0x115a <GPIO_readPin+0x96>
    1154:	51 e0       	ldi	r21, 0x01	; 1
    1156:	5e 83       	std	Y+6, r21	; 0x06
    1158:	01 c0       	rjmp	.+2      	; 0x115c <GPIO_readPin+0x98>
    115a:	1e 82       	std	Y+6, r1	; 0x06
    115c:	8e 81       	ldd	r24, Y+6	; 0x06
    115e:	89 87       	std	Y+9, r24	; 0x09
    1160:	4f c0       	rjmp	.+158    	; 0x1200 <GPIO_readPin+0x13c>
	case PORTB_ID:
		return BIT_IS_SET(PINB, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
    1162:	e6 e3       	ldi	r30, 0x36	; 54
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	88 2f       	mov	r24, r24
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	a9 01       	movw	r20, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <GPIO_readPin+0xb6>
    1176:	55 95       	asr	r21
    1178:	47 95       	ror	r20
    117a:	8a 95       	dec	r24
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <GPIO_readPin+0xb2>
    117e:	ca 01       	movw	r24, r20
    1180:	81 70       	andi	r24, 0x01	; 1
    1182:	90 70       	andi	r25, 0x00	; 0
    1184:	88 23       	and	r24, r24
    1186:	19 f0       	breq	.+6      	; 0x118e <GPIO_readPin+0xca>
    1188:	51 e0       	ldi	r21, 0x01	; 1
    118a:	5d 83       	std	Y+5, r21	; 0x05
    118c:	01 c0       	rjmp	.+2      	; 0x1190 <GPIO_readPin+0xcc>
    118e:	1d 82       	std	Y+5, r1	; 0x05
    1190:	8d 81       	ldd	r24, Y+5	; 0x05
    1192:	89 87       	std	Y+9, r24	; 0x09
    1194:	35 c0       	rjmp	.+106    	; 0x1200 <GPIO_readPin+0x13c>
	case PORTC_ID:
		return BIT_IS_SET(PINC, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
    1196:	e3 e3       	ldi	r30, 0x33	; 51
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	88 2f       	mov	r24, r24
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	a9 01       	movw	r20, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <GPIO_readPin+0xea>
    11aa:	55 95       	asr	r21
    11ac:	47 95       	ror	r20
    11ae:	8a 95       	dec	r24
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <GPIO_readPin+0xe6>
    11b2:	ca 01       	movw	r24, r20
    11b4:	81 70       	andi	r24, 0x01	; 1
    11b6:	90 70       	andi	r25, 0x00	; 0
    11b8:	88 23       	and	r24, r24
    11ba:	19 f0       	breq	.+6      	; 0x11c2 <GPIO_readPin+0xfe>
    11bc:	51 e0       	ldi	r21, 0x01	; 1
    11be:	5c 83       	std	Y+4, r21	; 0x04
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <GPIO_readPin+0x100>
    11c2:	1c 82       	std	Y+4, r1	; 0x04
    11c4:	8c 81       	ldd	r24, Y+4	; 0x04
    11c6:	89 87       	std	Y+9, r24	; 0x09
    11c8:	1b c0       	rjmp	.+54     	; 0x1200 <GPIO_readPin+0x13c>
	case PORTD_ID:
		return BIT_IS_SET(PIND, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
    11ca:	e0 e3       	ldi	r30, 0x30	; 48
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	88 2f       	mov	r24, r24
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	a9 01       	movw	r20, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <GPIO_readPin+0x11e>
    11de:	55 95       	asr	r21
    11e0:	47 95       	ror	r20
    11e2:	8a 95       	dec	r24
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <GPIO_readPin+0x11a>
    11e6:	ca 01       	movw	r24, r20
    11e8:	81 70       	andi	r24, 0x01	; 1
    11ea:	90 70       	andi	r25, 0x00	; 0
    11ec:	88 23       	and	r24, r24
    11ee:	19 f0       	breq	.+6      	; 0x11f6 <GPIO_readPin+0x132>
    11f0:	51 e0       	ldi	r21, 0x01	; 1
    11f2:	5b 83       	std	Y+3, r21	; 0x03
    11f4:	01 c0       	rjmp	.+2      	; 0x11f8 <GPIO_readPin+0x134>
    11f6:	1b 82       	std	Y+3, r1	; 0x03
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	89 87       	std	Y+9, r24	; 0x09
    11fc:	01 c0       	rjmp	.+2      	; 0x1200 <GPIO_readPin+0x13c>
	default:
		return LOGIC_LOW;
    11fe:	19 86       	std	Y+9, r1	; 0x09
    1200:	89 85       	ldd	r24, Y+9	; 0x09
	}
}
    1202:	29 96       	adiw	r28, 0x09	; 9
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <GPIO_setupPortDirection>:

void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	00 d0       	rcall	.+0      	; 0x121a <GPIO_setupPortDirection+0x6>
    121a:	00 d0       	rcall	.+0      	; 0x121c <GPIO_setupPortDirection+0x8>
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num >= NUM_OF_PORTS)
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	84 30       	cpi	r24, 0x04	; 4
    1228:	90 f5       	brcc	.+100    	; 0x128e <GPIO_setupPortDirection+0x7a>
		return;

	switch (port_num)
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	3c 83       	std	Y+4, r19	; 0x04
    1232:	2b 83       	std	Y+3, r18	; 0x03
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	d1 f0       	breq	.+52     	; 0x1272 <GPIO_setupPortDirection+0x5e>
    123e:	2b 81       	ldd	r18, Y+3	; 0x03
    1240:	3c 81       	ldd	r19, Y+4	; 0x04
    1242:	22 30       	cpi	r18, 0x02	; 2
    1244:	31 05       	cpc	r19, r1
    1246:	2c f4       	brge	.+10     	; 0x1252 <GPIO_setupPortDirection+0x3e>
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	9c 81       	ldd	r25, Y+4	; 0x04
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	61 f0       	breq	.+24     	; 0x1268 <GPIO_setupPortDirection+0x54>
    1250:	1e c0       	rjmp	.+60     	; 0x128e <GPIO_setupPortDirection+0x7a>
    1252:	2b 81       	ldd	r18, Y+3	; 0x03
    1254:	3c 81       	ldd	r19, Y+4	; 0x04
    1256:	22 30       	cpi	r18, 0x02	; 2
    1258:	31 05       	cpc	r19, r1
    125a:	81 f0       	breq	.+32     	; 0x127c <GPIO_setupPortDirection+0x68>
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	9c 81       	ldd	r25, Y+4	; 0x04
    1260:	83 30       	cpi	r24, 0x03	; 3
    1262:	91 05       	cpc	r25, r1
    1264:	81 f0       	breq	.+32     	; 0x1286 <GPIO_setupPortDirection+0x72>
    1266:	13 c0       	rjmp	.+38     	; 0x128e <GPIO_setupPortDirection+0x7a>
	{
	case PORTA_ID:
		DDRA = direction;
    1268:	ea e3       	ldi	r30, 0x3A	; 58
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	80 83       	st	Z, r24
    1270:	0e c0       	rjmp	.+28     	; 0x128e <GPIO_setupPortDirection+0x7a>
		break;
	case PORTB_ID:
		DDRB = direction;
    1272:	e7 e3       	ldi	r30, 0x37	; 55
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	80 83       	st	Z, r24
    127a:	09 c0       	rjmp	.+18     	; 0x128e <GPIO_setupPortDirection+0x7a>
		break;
	case PORTC_ID:
		DDRC = direction;
    127c:	e4 e3       	ldi	r30, 0x34	; 52
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	80 83       	st	Z, r24
    1284:	04 c0       	rjmp	.+8      	; 0x128e <GPIO_setupPortDirection+0x7a>
		break;
	case PORTD_ID:
		DDRD = direction;
    1286:	e1 e3       	ldi	r30, 0x31	; 49
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	80 83       	st	Z, r24
		break;
	}
}
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <GPIO_writePort>:

void GPIO_writePort(uint8 port_num, uint8 value)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <GPIO_writePort+0x6>
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <GPIO_writePort+0x8>
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	89 83       	std	Y+1, r24	; 0x01
    12aa:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num >= NUM_OF_PORTS)
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	84 30       	cpi	r24, 0x04	; 4
    12b0:	90 f5       	brcc	.+100    	; 0x1316 <GPIO_writePort+0x7a>
		return;

	switch (port_num)
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	3c 83       	std	Y+4, r19	; 0x04
    12ba:	2b 83       	std	Y+3, r18	; 0x03
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	9c 81       	ldd	r25, Y+4	; 0x04
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	91 05       	cpc	r25, r1
    12c4:	d1 f0       	breq	.+52     	; 0x12fa <GPIO_writePort+0x5e>
    12c6:	2b 81       	ldd	r18, Y+3	; 0x03
    12c8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	31 05       	cpc	r19, r1
    12ce:	2c f4       	brge	.+10     	; 0x12da <GPIO_writePort+0x3e>
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	61 f0       	breq	.+24     	; 0x12f0 <GPIO_writePort+0x54>
    12d8:	1e c0       	rjmp	.+60     	; 0x1316 <GPIO_writePort+0x7a>
    12da:	2b 81       	ldd	r18, Y+3	; 0x03
    12dc:	3c 81       	ldd	r19, Y+4	; 0x04
    12de:	22 30       	cpi	r18, 0x02	; 2
    12e0:	31 05       	cpc	r19, r1
    12e2:	81 f0       	breq	.+32     	; 0x1304 <GPIO_writePort+0x68>
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	9c 81       	ldd	r25, Y+4	; 0x04
    12e8:	83 30       	cpi	r24, 0x03	; 3
    12ea:	91 05       	cpc	r25, r1
    12ec:	81 f0       	breq	.+32     	; 0x130e <GPIO_writePort+0x72>
    12ee:	13 c0       	rjmp	.+38     	; 0x1316 <GPIO_writePort+0x7a>
	{
	case PORTA_ID:
		PORTA = value;
    12f0:	eb e3       	ldi	r30, 0x3B	; 59
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	80 83       	st	Z, r24
    12f8:	0e c0       	rjmp	.+28     	; 0x1316 <GPIO_writePort+0x7a>
		break;
	case PORTB_ID:
		PORTB = value;
    12fa:	e8 e3       	ldi	r30, 0x38	; 56
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	80 83       	st	Z, r24
    1302:	09 c0       	rjmp	.+18     	; 0x1316 <GPIO_writePort+0x7a>
		break;
	case PORTC_ID:
		PORTC = value;
    1304:	e5 e3       	ldi	r30, 0x35	; 53
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	80 83       	st	Z, r24
    130c:	04 c0       	rjmp	.+8      	; 0x1316 <GPIO_writePort+0x7a>
		break;
	case PORTD_ID:
		PORTD = value;
    130e:	e2 e3       	ldi	r30, 0x32	; 50
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	80 83       	st	Z, r24
		break;
	}
}
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <GPIO_readPort>:

uint8 GPIO_readPort(uint8 port_num)
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	00 d0       	rcall	.+0      	; 0x132a <GPIO_readPort+0x6>
    132a:	00 d0       	rcall	.+0      	; 0x132c <GPIO_readPort+0x8>
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	89 83       	std	Y+1, r24	; 0x01
	if (port_num >= NUM_OF_PORTS)
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	84 30       	cpi	r24, 0x04	; 4
    1336:	10 f0       	brcs	.+4      	; 0x133c <GPIO_readPort+0x18>
		return 0;
    1338:	1c 82       	std	Y+4, r1	; 0x04
    133a:	34 c0       	rjmp	.+104    	; 0x13a4 <GPIO_readPort+0x80>

	switch (port_num)
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	3b 83       	std	Y+3, r19	; 0x03
    1344:	2a 83       	std	Y+2, r18	; 0x02
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	9b 81       	ldd	r25, Y+3	; 0x03
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	91 05       	cpc	r25, r1
    134e:	d1 f0       	breq	.+52     	; 0x1384 <GPIO_readPort+0x60>
    1350:	2a 81       	ldd	r18, Y+2	; 0x02
    1352:	3b 81       	ldd	r19, Y+3	; 0x03
    1354:	22 30       	cpi	r18, 0x02	; 2
    1356:	31 05       	cpc	r19, r1
    1358:	2c f4       	brge	.+10     	; 0x1364 <GPIO_readPort+0x40>
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	9b 81       	ldd	r25, Y+3	; 0x03
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	61 f0       	breq	.+24     	; 0x137a <GPIO_readPort+0x56>
    1362:	1f c0       	rjmp	.+62     	; 0x13a2 <GPIO_readPort+0x7e>
    1364:	2a 81       	ldd	r18, Y+2	; 0x02
    1366:	3b 81       	ldd	r19, Y+3	; 0x03
    1368:	22 30       	cpi	r18, 0x02	; 2
    136a:	31 05       	cpc	r19, r1
    136c:	81 f0       	breq	.+32     	; 0x138e <GPIO_readPort+0x6a>
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	9b 81       	ldd	r25, Y+3	; 0x03
    1372:	83 30       	cpi	r24, 0x03	; 3
    1374:	91 05       	cpc	r25, r1
    1376:	81 f0       	breq	.+32     	; 0x1398 <GPIO_readPort+0x74>
    1378:	14 c0       	rjmp	.+40     	; 0x13a2 <GPIO_readPort+0x7e>
	{
	case PORTA_ID:
		return PINA;
    137a:	e9 e3       	ldi	r30, 0x39	; 57
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	90 81       	ld	r25, Z
    1380:	9c 83       	std	Y+4, r25	; 0x04
    1382:	10 c0       	rjmp	.+32     	; 0x13a4 <GPIO_readPort+0x80>
	case PORTB_ID:
		return PINB;
    1384:	e6 e3       	ldi	r30, 0x36	; 54
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	20 81       	ld	r18, Z
    138a:	2c 83       	std	Y+4, r18	; 0x04
    138c:	0b c0       	rjmp	.+22     	; 0x13a4 <GPIO_readPort+0x80>
	case PORTC_ID:
		return PINC;
    138e:	e3 e3       	ldi	r30, 0x33	; 51
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	30 81       	ld	r19, Z
    1394:	3c 83       	std	Y+4, r19	; 0x04
    1396:	06 c0       	rjmp	.+12     	; 0x13a4 <GPIO_readPort+0x80>
	case PORTD_ID:
		return PIND;
    1398:	e0 e3       	ldi	r30, 0x30	; 48
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	8c 83       	std	Y+4, r24	; 0x04
    13a0:	01 c0       	rjmp	.+2      	; 0x13a4 <GPIO_readPort+0x80>
	default:
		return 0;
    13a2:	1c 82       	std	Y+4, r1	; 0x04
    13a4:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <__vector_6>:
#include <avr/io.h>
#include <avr/interrupt.h>

static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER1_CAPT_vect) {
    13b4:	1f 92       	push	r1
    13b6:	0f 92       	push	r0
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	0f 92       	push	r0
    13bc:	11 24       	eor	r1, r1
    13be:	2f 93       	push	r18
    13c0:	3f 93       	push	r19
    13c2:	4f 93       	push	r20
    13c4:	5f 93       	push	r21
    13c6:	6f 93       	push	r22
    13c8:	7f 93       	push	r23
    13ca:	8f 93       	push	r24
    13cc:	9f 93       	push	r25
    13ce:	af 93       	push	r26
    13d0:	bf 93       	push	r27
    13d2:	ef 93       	push	r30
    13d4:	ff 93       	push	r31
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR) {
    13de:	80 91 84 00 	lds	r24, 0x0084
    13e2:	90 91 85 00 	lds	r25, 0x0085
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	29 f0       	breq	.+10     	; 0x13f4 <__vector_6+0x40>
		(*g_callBackPtr)();
    13ea:	e0 91 84 00 	lds	r30, 0x0084
    13ee:	f0 91 85 00 	lds	r31, 0x0085
    13f2:	09 95       	icall
	}
}
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	ff 91       	pop	r31
    13fa:	ef 91       	pop	r30
    13fc:	bf 91       	pop	r27
    13fe:	af 91       	pop	r26
    1400:	9f 91       	pop	r25
    1402:	8f 91       	pop	r24
    1404:	7f 91       	pop	r23
    1406:	6f 91       	pop	r22
    1408:	5f 91       	pop	r21
    140a:	4f 91       	pop	r20
    140c:	3f 91       	pop	r19
    140e:	2f 91       	pop	r18
    1410:	0f 90       	pop	r0
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	0f 90       	pop	r0
    1416:	1f 90       	pop	r1
    1418:	18 95       	reti

0000141a <ICU_init>:

void ICU_init(const ICU_ConfigType * Config_Ptr) {
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <ICU_init+0x6>
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	9a 83       	std	Y+2, r25	; 0x02
    1426:	89 83       	std	Y+1, r24	; 0x01
	DDRD &= ~(1 << PD6);
    1428:	a1 e3       	ldi	r26, 0x31	; 49
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e1 e3       	ldi	r30, 0x31	; 49
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	8f 7b       	andi	r24, 0xBF	; 191
    1434:	8c 93       	st	X, r24

	TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    1436:	ef e4       	ldi	r30, 0x4F	; 79
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	8c e0       	ldi	r24, 0x0C	; 12
    143c:	80 83       	st	Z, r24

	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    143e:	ae e4       	ldi	r26, 0x4E	; 78
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	ee e4       	ldi	r30, 0x4E	; 78
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	98 2f       	mov	r25, r24
    144a:	98 7f       	andi	r25, 0xF8	; 248
    144c:	e9 81       	ldd	r30, Y+1	; 0x01
    144e:	fa 81       	ldd	r31, Y+2	; 0x02
    1450:	80 81       	ld	r24, Z
    1452:	89 2b       	or	r24, r25
    1454:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge) << 6);
    1456:	ae e4       	ldi	r26, 0x4E	; 78
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	ee e4       	ldi	r30, 0x4E	; 78
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	28 2f       	mov	r18, r24
    1462:	2f 7b       	andi	r18, 0xBF	; 191
    1464:	e9 81       	ldd	r30, Y+1	; 0x01
    1466:	fa 81       	ldd	r31, Y+2	; 0x02
    1468:	81 81       	ldd	r24, Z+1	; 0x01
    146a:	88 2f       	mov	r24, r24
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	00 24       	eor	r0, r0
    1470:	96 95       	lsr	r25
    1472:	87 95       	ror	r24
    1474:	07 94       	ror	r0
    1476:	96 95       	lsr	r25
    1478:	87 95       	ror	r24
    147a:	07 94       	ror	r0
    147c:	98 2f       	mov	r25, r24
    147e:	80 2d       	mov	r24, r0
    1480:	82 2b       	or	r24, r18
    1482:	8c 93       	st	X, r24

	TCNT1 = 0;
    1484:	ec e4       	ldi	r30, 0x4C	; 76
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	11 82       	std	Z+1, r1	; 0x01
    148a:	10 82       	st	Z, r1
	ICR1 = 0;
    148c:	e6 e4       	ldi	r30, 0x46	; 70
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	11 82       	std	Z+1, r1	; 0x01
    1492:	10 82       	st	Z, r1

	TIMSK |= (1 << TICIE1);
    1494:	a9 e5       	ldi	r26, 0x59	; 89
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e9 e5       	ldi	r30, 0x59	; 89
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	80 62       	ori	r24, 0x20	; 32
    14a0:	8c 93       	st	X, r24
}
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <ICU_setCallBack>:

void ICU_setCallBack(void(*a_ptr)(void)) {
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <ICU_setCallBack+0x6>
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	9a 83       	std	Y+2, r25	; 0x02
    14b8:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	9a 81       	ldd	r25, Y+2	; 0x02
    14be:	90 93 85 00 	sts	0x0085, r25
    14c2:	80 93 84 00 	sts	0x0084, r24
}
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <ICU_setEdgeDetectionType>:

void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType) {
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	0f 92       	push	r0
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType << 6);
    14dc:	ae e4       	ldi	r26, 0x4E	; 78
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	ee e4       	ldi	r30, 0x4E	; 78
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	28 2f       	mov	r18, r24
    14e8:	2f 7b       	andi	r18, 0xBF	; 191
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	88 2f       	mov	r24, r24
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	00 24       	eor	r0, r0
    14f2:	96 95       	lsr	r25
    14f4:	87 95       	ror	r24
    14f6:	07 94       	ror	r0
    14f8:	96 95       	lsr	r25
    14fa:	87 95       	ror	r24
    14fc:	07 94       	ror	r0
    14fe:	98 2f       	mov	r25, r24
    1500:	80 2d       	mov	r24, r0
    1502:	82 2b       	or	r24, r18
    1504:	8c 93       	st	X, r24
}
    1506:	0f 90       	pop	r0
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <ICU_getInputCaptureValue>:

uint16 ICU_getInputCaptureValue(void) {
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1516:	e6 e4       	ldi	r30, 0x46	; 70
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	91 81       	ldd	r25, Z+1	; 0x01
}
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <ICU_clearTimerValue>:

void ICU_clearTimerValue(void) {
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    152c:	ec e4       	ldi	r30, 0x4C	; 76
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	11 82       	std	Z+1, r1	; 0x01
    1532:	10 82       	st	Z, r1
}
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <ICU_deInit>:

void ICU_deInit(void) {
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1542:	ef e4       	ldi	r30, 0x4F	; 79
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	10 82       	st	Z, r1
	TCCR1B = 0;
    1548:	ee e4       	ldi	r30, 0x4E	; 78
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	10 82       	st	Z, r1
	TCNT1 = 0;
    154e:	ec e4       	ldi	r30, 0x4C	; 76
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	11 82       	std	Z+1, r1	; 0x01
    1554:	10 82       	st	Z, r1
	ICR1 = 0;
    1556:	e6 e4       	ldi	r30, 0x46	; 70
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	11 82       	std	Z+1, r1	; 0x01
    155c:	10 82       	st	Z, r1
	TIMSK &= ~(1 << TICIE1);
    155e:	a9 e5       	ldi	r26, 0x59	; 89
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e9 e5       	ldi	r30, 0x59	; 89
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	8f 7d       	andi	r24, 0xDF	; 223
    156a:	8c 93       	st	X, r24
	g_callBackPtr = NULL_PTR;
    156c:	10 92 85 00 	sts	0x0085, r1
    1570:	10 92 84 00 	sts	0x0084, r1
}
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <LCD_initialize>:
#include "common_macros.h"
#include <util/delay.h>
#include <stdlib.h>

void LCD_initialize(void)
{
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	2e 97       	sbiw	r28, 0x0e	; 14
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	de bf       	out	0x3e, r29	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT, LCD_RS_PIN, PIN_OUTPUT);
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	61 e0       	ldi	r22, 0x01	; 1
    1592:	41 e0       	ldi	r20, 0x01	; 1
    1594:	0e 94 78 06 	call	0xcf0	; 0xcf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT, LCD_E_PIN, PIN_OUTPUT);
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	62 e0       	ldi	r22, 0x02	; 2
    159c:	41 e0       	ldi	r20, 0x01	; 1
    159e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <GPIO_setupPinDirection>

#if (LCD_MODE_BITS == 4)
	GPIO_setupPinDirection(LCD_DATA_PORT, LCD_PIN_DB4, PIN_OUTPUT);
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	63 e0       	ldi	r22, 0x03	; 3
    15a6:	41 e0       	ldi	r20, 0x01	; 1
    15a8:	0e 94 78 06 	call	0xcf0	; 0xcf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT, LCD_PIN_DB5, PIN_OUTPUT);
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	64 e0       	ldi	r22, 0x04	; 4
    15b0:	41 e0       	ldi	r20, 0x01	; 1
    15b2:	0e 94 78 06 	call	0xcf0	; 0xcf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT, LCD_PIN_DB6, PIN_OUTPUT);
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	65 e0       	ldi	r22, 0x05	; 5
    15ba:	41 e0       	ldi	r20, 0x01	; 1
    15bc:	0e 94 78 06 	call	0xcf0	; 0xcf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT, LCD_PIN_DB7, PIN_OUTPUT);
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	66 e0       	ldi	r22, 0x06	; 6
    15c4:	41 e0       	ldi	r20, 0x01	; 1
    15c6:	0e 94 78 06 	call	0xcf0	; 0xcf0 <GPIO_setupPinDirection>
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	a0 ea       	ldi	r26, 0xA0	; 160
    15d0:	b1 e4       	ldi	r27, 0x41	; 65
    15d2:	8b 87       	std	Y+11, r24	; 0x0b
    15d4:	9c 87       	std	Y+12, r25	; 0x0c
    15d6:	ad 87       	std	Y+13, r26	; 0x0d
    15d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15da:	6b 85       	ldd	r22, Y+11	; 0x0b
    15dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    15de:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	4a e7       	ldi	r20, 0x7A	; 122
    15e8:	55 e4       	ldi	r21, 0x45	; 69
    15ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	8f 83       	std	Y+7, r24	; 0x07
    15f4:	98 87       	std	Y+8, r25	; 0x08
    15f6:	a9 87       	std	Y+9, r26	; 0x09
    15f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15fa:	6f 81       	ldd	r22, Y+7	; 0x07
    15fc:	78 85       	ldd	r23, Y+8	; 0x08
    15fe:	89 85       	ldd	r24, Y+9	; 0x09
    1600:	9a 85       	ldd	r25, Y+10	; 0x0a
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e8       	ldi	r20, 0x80	; 128
    1608:	5f e3       	ldi	r21, 0x3F	; 63
    160a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    160e:	88 23       	and	r24, r24
    1610:	2c f4       	brge	.+10     	; 0x161c <LCD_initialize+0xa2>
		__ticks = 1;
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	9e 83       	std	Y+6, r25	; 0x06
    1618:	8d 83       	std	Y+5, r24	; 0x05
    161a:	3f c0       	rjmp	.+126    	; 0x169a <LCD_initialize+0x120>
	else if (__tmp > 65535)
    161c:	6f 81       	ldd	r22, Y+7	; 0x07
    161e:	78 85       	ldd	r23, Y+8	; 0x08
    1620:	89 85       	ldd	r24, Y+9	; 0x09
    1622:	9a 85       	ldd	r25, Y+10	; 0x0a
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	3f ef       	ldi	r19, 0xFF	; 255
    1628:	4f e7       	ldi	r20, 0x7F	; 127
    162a:	57 e4       	ldi	r21, 0x47	; 71
    162c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1630:	18 16       	cp	r1, r24
    1632:	4c f5       	brge	.+82     	; 0x1686 <LCD_initialize+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1634:	6b 85       	ldd	r22, Y+11	; 0x0b
    1636:	7c 85       	ldd	r23, Y+12	; 0x0c
    1638:	8d 85       	ldd	r24, Y+13	; 0x0d
    163a:	9e 85       	ldd	r25, Y+14	; 0x0e
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	40 e2       	ldi	r20, 0x20	; 32
    1642:	51 e4       	ldi	r21, 0x41	; 65
    1644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	bc 01       	movw	r22, r24
    164e:	cd 01       	movw	r24, r26
    1650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	9e 83       	std	Y+6, r25	; 0x06
    165a:	8d 83       	std	Y+5, r24	; 0x05
    165c:	0f c0       	rjmp	.+30     	; 0x167c <LCD_initialize+0x102>
    165e:	80 e9       	ldi	r24, 0x90	; 144
    1660:	91 e0       	ldi	r25, 0x01	; 1
    1662:	9c 83       	std	Y+4, r25	; 0x04
    1664:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	9c 81       	ldd	r25, Y+4	; 0x04
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	f1 f7       	brne	.-4      	; 0x166a <LCD_initialize+0xf0>
    166e:	9c 83       	std	Y+4, r25	; 0x04
    1670:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1672:	8d 81       	ldd	r24, Y+5	; 0x05
    1674:	9e 81       	ldd	r25, Y+6	; 0x06
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	9e 83       	std	Y+6, r25	; 0x06
    167a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167c:	8d 81       	ldd	r24, Y+5	; 0x05
    167e:	9e 81       	ldd	r25, Y+6	; 0x06
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	69 f7       	brne	.-38     	; 0x165e <LCD_initialize+0xe4>
    1684:	14 c0       	rjmp	.+40     	; 0x16ae <LCD_initialize+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1686:	6f 81       	ldd	r22, Y+7	; 0x07
    1688:	78 85       	ldd	r23, Y+8	; 0x08
    168a:	89 85       	ldd	r24, Y+9	; 0x09
    168c:	9a 85       	ldd	r25, Y+10	; 0x0a
    168e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	9e 83       	std	Y+6, r25	; 0x06
    1698:	8d 83       	std	Y+5, r24	; 0x05
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	9e 81       	ldd	r25, Y+6	; 0x06
    169e:	9a 83       	std	Y+2, r25	; 0x02
    16a0:	89 83       	std	Y+1, r24	; 0x01
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	9a 81       	ldd	r25, Y+2	; 0x02
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	f1 f7       	brne	.-4      	; 0x16a6 <LCD_initialize+0x12c>
    16aa:	9a 83       	std	Y+2, r25	; 0x02
    16ac:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);
	LCD_sendCommand(LCD_CMD_INIT_4BIT_1);
    16ae:	83 e3       	ldi	r24, 0x33	; 51
    16b0:	0e 94 6f 0b 	call	0x16de	; 0x16de <LCD_sendCommand>
	LCD_sendCommand(LCD_CMD_INIT_4BIT_2);
    16b4:	82 e3       	ldi	r24, 0x32	; 50
    16b6:	0e 94 6f 0b 	call	0x16de	; 0x16de <LCD_sendCommand>
	LCD_sendCommand(LCD_CMD_2LINE_4BIT_MODE);
    16ba:	88 e2       	ldi	r24, 0x28	; 40
    16bc:	0e 94 6f 0b 	call	0x16de	; 0x16de <LCD_sendCommand>
#elif (LCD_MODE_BITS == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
	LCD_sendCommand(LCD_CMD_2LINE_8BIT_MODE);
#endif

	LCD_sendCommand(LCD_CMD_CURSOR_OFF);
    16c0:	8c e0       	ldi	r24, 0x0C	; 12
    16c2:	0e 94 6f 0b 	call	0x16de	; 0x16de <LCD_sendCommand>
	LCD_sendCommand(LCD_CMD_CLEAR_SCREEN);
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	0e 94 6f 0b 	call	0x16de	; 0x16de <LCD_sendCommand>
}
    16cc:	2e 96       	adiw	r28, 0x0e	; 14
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <LCD_sendCommand>:

void LCD_sendCommand(uint8 cmd)
{
    16de:	0f 93       	push	r16
    16e0:	1f 93       	push	r17
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
    16ea:	c3 56       	subi	r28, 0x63	; 99
    16ec:	d0 40       	sbci	r29, 0x00	; 0
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	fe 01       	movw	r30, r28
    16fa:	ed 59       	subi	r30, 0x9D	; 157
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW);
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	61 e0       	ldi	r22, 0x01	; 1
    1704:	40 e0       	ldi	r20, 0x00	; 0
    1706:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    170a:	fe 01       	movw	r30, r28
    170c:	e1 5a       	subi	r30, 0xA1	; 161
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	a0 e8       	ldi	r26, 0x80	; 128
    1716:	bf e3       	ldi	r27, 0x3F	; 63
    1718:	80 83       	st	Z, r24
    171a:	91 83       	std	Z+1, r25	; 0x01
    171c:	a2 83       	std	Z+2, r26	; 0x02
    171e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1720:	8e 01       	movw	r16, r28
    1722:	05 5a       	subi	r16, 0xA5	; 165
    1724:	1f 4f       	sbci	r17, 0xFF	; 255
    1726:	fe 01       	movw	r30, r28
    1728:	e1 5a       	subi	r30, 0xA1	; 161
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	60 81       	ld	r22, Z
    172e:	71 81       	ldd	r23, Z+1	; 0x01
    1730:	82 81       	ldd	r24, Z+2	; 0x02
    1732:	93 81       	ldd	r25, Z+3	; 0x03
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	4a e7       	ldi	r20, 0x7A	; 122
    173a:	55 e4       	ldi	r21, 0x45	; 69
    173c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	f8 01       	movw	r30, r16
    1746:	80 83       	st	Z, r24
    1748:	91 83       	std	Z+1, r25	; 0x01
    174a:	a2 83       	std	Z+2, r26	; 0x02
    174c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    174e:	fe 01       	movw	r30, r28
    1750:	e5 5a       	subi	r30, 0xA5	; 165
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	60 81       	ld	r22, Z
    1756:	71 81       	ldd	r23, Z+1	; 0x01
    1758:	82 81       	ldd	r24, Z+2	; 0x02
    175a:	93 81       	ldd	r25, Z+3	; 0x03
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e8       	ldi	r20, 0x80	; 128
    1762:	5f e3       	ldi	r21, 0x3F	; 63
    1764:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1768:	88 23       	and	r24, r24
    176a:	44 f4       	brge	.+16     	; 0x177c <LCD_sendCommand+0x9e>
		__ticks = 1;
    176c:	fe 01       	movw	r30, r28
    176e:	e7 5a       	subi	r30, 0xA7	; 167
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	91 83       	std	Z+1, r25	; 0x01
    1778:	80 83       	st	Z, r24
    177a:	64 c0       	rjmp	.+200    	; 0x1844 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    177c:	fe 01       	movw	r30, r28
    177e:	e5 5a       	subi	r30, 0xA5	; 165
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	60 81       	ld	r22, Z
    1784:	71 81       	ldd	r23, Z+1	; 0x01
    1786:	82 81       	ldd	r24, Z+2	; 0x02
    1788:	93 81       	ldd	r25, Z+3	; 0x03
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	3f ef       	ldi	r19, 0xFF	; 255
    178e:	4f e7       	ldi	r20, 0x7F	; 127
    1790:	57 e4       	ldi	r21, 0x47	; 71
    1792:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1796:	18 16       	cp	r1, r24
    1798:	0c f0       	brlt	.+2      	; 0x179c <LCD_sendCommand+0xbe>
    179a:	43 c0       	rjmp	.+134    	; 0x1822 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179c:	fe 01       	movw	r30, r28
    179e:	e1 5a       	subi	r30, 0xA1	; 161
    17a0:	ff 4f       	sbci	r31, 0xFF	; 255
    17a2:	60 81       	ld	r22, Z
    17a4:	71 81       	ldd	r23, Z+1	; 0x01
    17a6:	82 81       	ldd	r24, Z+2	; 0x02
    17a8:	93 81       	ldd	r25, Z+3	; 0x03
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e2       	ldi	r20, 0x20	; 32
    17b0:	51 e4       	ldi	r21, 0x41	; 65
    17b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	8e 01       	movw	r16, r28
    17bc:	07 5a       	subi	r16, 0xA7	; 167
    17be:	1f 4f       	sbci	r17, 0xFF	; 255
    17c0:	bc 01       	movw	r22, r24
    17c2:	cd 01       	movw	r24, r26
    17c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	f8 01       	movw	r30, r16
    17ce:	91 83       	std	Z+1, r25	; 0x01
    17d0:	80 83       	st	Z, r24
    17d2:	1f c0       	rjmp	.+62     	; 0x1812 <LCD_sendCommand+0x134>
    17d4:	fe 01       	movw	r30, r28
    17d6:	e9 5a       	subi	r30, 0xA9	; 169
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	80 e9       	ldi	r24, 0x90	; 144
    17dc:	91 e0       	ldi	r25, 0x01	; 1
    17de:	91 83       	std	Z+1, r25	; 0x01
    17e0:	80 83       	st	Z, r24
    17e2:	fe 01       	movw	r30, r28
    17e4:	e9 5a       	subi	r30, 0xA9	; 169
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	80 81       	ld	r24, Z
    17ea:	91 81       	ldd	r25, Z+1	; 0x01
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	f1 f7       	brne	.-4      	; 0x17ec <LCD_sendCommand+0x10e>
    17f0:	fe 01       	movw	r30, r28
    17f2:	e9 5a       	subi	r30, 0xA9	; 169
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fa:	de 01       	movw	r26, r28
    17fc:	a7 5a       	subi	r26, 0xA7	; 167
    17fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1800:	fe 01       	movw	r30, r28
    1802:	e7 5a       	subi	r30, 0xA7	; 167
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	80 81       	ld	r24, Z
    1808:	91 81       	ldd	r25, Z+1	; 0x01
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	11 96       	adiw	r26, 0x01	; 1
    180e:	9c 93       	st	X, r25
    1810:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1812:	fe 01       	movw	r30, r28
    1814:	e7 5a       	subi	r30, 0xA7	; 167
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	80 81       	ld	r24, Z
    181a:	91 81       	ldd	r25, Z+1	; 0x01
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	d1 f6       	brne	.-76     	; 0x17d4 <LCD_sendCommand+0xf6>
    1820:	27 c0       	rjmp	.+78     	; 0x1870 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1822:	8e 01       	movw	r16, r28
    1824:	07 5a       	subi	r16, 0xA7	; 167
    1826:	1f 4f       	sbci	r17, 0xFF	; 255
    1828:	fe 01       	movw	r30, r28
    182a:	e5 5a       	subi	r30, 0xA5	; 165
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	60 81       	ld	r22, Z
    1830:	71 81       	ldd	r23, Z+1	; 0x01
    1832:	82 81       	ldd	r24, Z+2	; 0x02
    1834:	93 81       	ldd	r25, Z+3	; 0x03
    1836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	f8 01       	movw	r30, r16
    1840:	91 83       	std	Z+1, r25	; 0x01
    1842:	80 83       	st	Z, r24
    1844:	de 01       	movw	r26, r28
    1846:	ab 5a       	subi	r26, 0xAB	; 171
    1848:	bf 4f       	sbci	r27, 0xFF	; 255
    184a:	fe 01       	movw	r30, r28
    184c:	e7 5a       	subi	r30, 0xA7	; 167
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	80 81       	ld	r24, Z
    1852:	91 81       	ldd	r25, Z+1	; 0x01
    1854:	8d 93       	st	X+, r24
    1856:	9c 93       	st	X, r25
    1858:	fe 01       	movw	r30, r28
    185a:	eb 5a       	subi	r30, 0xAB	; 171
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	80 81       	ld	r24, Z
    1860:	91 81       	ldd	r25, Z+1	; 0x01
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	f1 f7       	brne	.-4      	; 0x1862 <LCD_sendCommand+0x184>
    1866:	fe 01       	movw	r30, r28
    1868:	eb 5a       	subi	r30, 0xAB	; 171
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	91 83       	std	Z+1, r25	; 0x01
    186e:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	62 e0       	ldi	r22, 0x02	; 2
    1874:	41 e0       	ldi	r20, 0x01	; 1
    1876:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    187a:	fe 01       	movw	r30, r28
    187c:	ef 5a       	subi	r30, 0xAF	; 175
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	a0 e8       	ldi	r26, 0x80	; 128
    1886:	bf e3       	ldi	r27, 0x3F	; 63
    1888:	80 83       	st	Z, r24
    188a:	91 83       	std	Z+1, r25	; 0x01
    188c:	a2 83       	std	Z+2, r26	; 0x02
    188e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1890:	8e 01       	movw	r16, r28
    1892:	03 5b       	subi	r16, 0xB3	; 179
    1894:	1f 4f       	sbci	r17, 0xFF	; 255
    1896:	fe 01       	movw	r30, r28
    1898:	ef 5a       	subi	r30, 0xAF	; 175
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	60 81       	ld	r22, Z
    189e:	71 81       	ldd	r23, Z+1	; 0x01
    18a0:	82 81       	ldd	r24, Z+2	; 0x02
    18a2:	93 81       	ldd	r25, Z+3	; 0x03
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	4a e7       	ldi	r20, 0x7A	; 122
    18aa:	55 e4       	ldi	r21, 0x45	; 69
    18ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	f8 01       	movw	r30, r16
    18b6:	80 83       	st	Z, r24
    18b8:	91 83       	std	Z+1, r25	; 0x01
    18ba:	a2 83       	std	Z+2, r26	; 0x02
    18bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18be:	fe 01       	movw	r30, r28
    18c0:	e3 5b       	subi	r30, 0xB3	; 179
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	60 81       	ld	r22, Z
    18c6:	71 81       	ldd	r23, Z+1	; 0x01
    18c8:	82 81       	ldd	r24, Z+2	; 0x02
    18ca:	93 81       	ldd	r25, Z+3	; 0x03
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e8       	ldi	r20, 0x80	; 128
    18d2:	5f e3       	ldi	r21, 0x3F	; 63
    18d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18d8:	88 23       	and	r24, r24
    18da:	44 f4       	brge	.+16     	; 0x18ec <LCD_sendCommand+0x20e>
		__ticks = 1;
    18dc:	fe 01       	movw	r30, r28
    18de:	e5 5b       	subi	r30, 0xB5	; 181
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	91 83       	std	Z+1, r25	; 0x01
    18e8:	80 83       	st	Z, r24
    18ea:	64 c0       	rjmp	.+200    	; 0x19b4 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    18ec:	fe 01       	movw	r30, r28
    18ee:	e3 5b       	subi	r30, 0xB3	; 179
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	60 81       	ld	r22, Z
    18f4:	71 81       	ldd	r23, Z+1	; 0x01
    18f6:	82 81       	ldd	r24, Z+2	; 0x02
    18f8:	93 81       	ldd	r25, Z+3	; 0x03
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	3f ef       	ldi	r19, 0xFF	; 255
    18fe:	4f e7       	ldi	r20, 0x7F	; 127
    1900:	57 e4       	ldi	r21, 0x47	; 71
    1902:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1906:	18 16       	cp	r1, r24
    1908:	0c f0       	brlt	.+2      	; 0x190c <LCD_sendCommand+0x22e>
    190a:	43 c0       	rjmp	.+134    	; 0x1992 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190c:	fe 01       	movw	r30, r28
    190e:	ef 5a       	subi	r30, 0xAF	; 175
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	60 81       	ld	r22, Z
    1914:	71 81       	ldd	r23, Z+1	; 0x01
    1916:	82 81       	ldd	r24, Z+2	; 0x02
    1918:	93 81       	ldd	r25, Z+3	; 0x03
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	40 e2       	ldi	r20, 0x20	; 32
    1920:	51 e4       	ldi	r21, 0x41	; 65
    1922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	8e 01       	movw	r16, r28
    192c:	05 5b       	subi	r16, 0xB5	; 181
    192e:	1f 4f       	sbci	r17, 0xFF	; 255
    1930:	bc 01       	movw	r22, r24
    1932:	cd 01       	movw	r24, r26
    1934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	f8 01       	movw	r30, r16
    193e:	91 83       	std	Z+1, r25	; 0x01
    1940:	80 83       	st	Z, r24
    1942:	1f c0       	rjmp	.+62     	; 0x1982 <LCD_sendCommand+0x2a4>
    1944:	fe 01       	movw	r30, r28
    1946:	e7 5b       	subi	r30, 0xB7	; 183
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	80 e9       	ldi	r24, 0x90	; 144
    194c:	91 e0       	ldi	r25, 0x01	; 1
    194e:	91 83       	std	Z+1, r25	; 0x01
    1950:	80 83       	st	Z, r24
    1952:	fe 01       	movw	r30, r28
    1954:	e7 5b       	subi	r30, 0xB7	; 183
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	80 81       	ld	r24, Z
    195a:	91 81       	ldd	r25, Z+1	; 0x01
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	f1 f7       	brne	.-4      	; 0x195c <LCD_sendCommand+0x27e>
    1960:	fe 01       	movw	r30, r28
    1962:	e7 5b       	subi	r30, 0xB7	; 183
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	91 83       	std	Z+1, r25	; 0x01
    1968:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196a:	de 01       	movw	r26, r28
    196c:	a5 5b       	subi	r26, 0xB5	; 181
    196e:	bf 4f       	sbci	r27, 0xFF	; 255
    1970:	fe 01       	movw	r30, r28
    1972:	e5 5b       	subi	r30, 0xB5	; 181
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	80 81       	ld	r24, Z
    1978:	91 81       	ldd	r25, Z+1	; 0x01
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	11 96       	adiw	r26, 0x01	; 1
    197e:	9c 93       	st	X, r25
    1980:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1982:	fe 01       	movw	r30, r28
    1984:	e5 5b       	subi	r30, 0xB5	; 181
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	80 81       	ld	r24, Z
    198a:	91 81       	ldd	r25, Z+1	; 0x01
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	d1 f6       	brne	.-76     	; 0x1944 <LCD_sendCommand+0x266>
    1990:	27 c0       	rjmp	.+78     	; 0x19e0 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1992:	8e 01       	movw	r16, r28
    1994:	05 5b       	subi	r16, 0xB5	; 181
    1996:	1f 4f       	sbci	r17, 0xFF	; 255
    1998:	fe 01       	movw	r30, r28
    199a:	e3 5b       	subi	r30, 0xB3	; 179
    199c:	ff 4f       	sbci	r31, 0xFF	; 255
    199e:	60 81       	ld	r22, Z
    19a0:	71 81       	ldd	r23, Z+1	; 0x01
    19a2:	82 81       	ldd	r24, Z+2	; 0x02
    19a4:	93 81       	ldd	r25, Z+3	; 0x03
    19a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	f8 01       	movw	r30, r16
    19b0:	91 83       	std	Z+1, r25	; 0x01
    19b2:	80 83       	st	Z, r24
    19b4:	de 01       	movw	r26, r28
    19b6:	a9 5b       	subi	r26, 0xB9	; 185
    19b8:	bf 4f       	sbci	r27, 0xFF	; 255
    19ba:	fe 01       	movw	r30, r28
    19bc:	e5 5b       	subi	r30, 0xB5	; 181
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	80 81       	ld	r24, Z
    19c2:	91 81       	ldd	r25, Z+1	; 0x01
    19c4:	8d 93       	st	X+, r24
    19c6:	9c 93       	st	X, r25
    19c8:	fe 01       	movw	r30, r28
    19ca:	e9 5b       	subi	r30, 0xB9	; 185
    19cc:	ff 4f       	sbci	r31, 0xFF	; 255
    19ce:	80 81       	ld	r24, Z
    19d0:	91 81       	ldd	r25, Z+1	; 0x01
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <LCD_sendCommand+0x2f4>
    19d6:	fe 01       	movw	r30, r28
    19d8:	e9 5b       	subi	r30, 0xB9	; 185
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	91 83       	std	Z+1, r25	; 0x01
    19de:	80 83       	st	Z, r24
	_delay_ms(1);

#if (LCD_MODE_BITS == 4)
	GPIO_writePin(LCD_DATA_PORT, LCD_PIN_DB4, GET_BIT(cmd, 4));
    19e0:	fe 01       	movw	r30, r28
    19e2:	ed 59       	subi	r30, 0x9D	; 157
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	80 81       	ld	r24, Z
    19e8:	82 95       	swap	r24
    19ea:	8f 70       	andi	r24, 0x0F	; 15
    19ec:	98 2f       	mov	r25, r24
    19ee:	91 70       	andi	r25, 0x01	; 1
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	63 e0       	ldi	r22, 0x03	; 3
    19f4:	49 2f       	mov	r20, r25
    19f6:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_PIN_DB5, GET_BIT(cmd, 5));
    19fa:	fe 01       	movw	r30, r28
    19fc:	ed 59       	subi	r30, 0x9D	; 157
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	80 81       	ld	r24, Z
    1a02:	82 95       	swap	r24
    1a04:	86 95       	lsr	r24
    1a06:	87 70       	andi	r24, 0x07	; 7
    1a08:	98 2f       	mov	r25, r24
    1a0a:	91 70       	andi	r25, 0x01	; 1
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	64 e0       	ldi	r22, 0x04	; 4
    1a10:	49 2f       	mov	r20, r25
    1a12:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_PIN_DB6, GET_BIT(cmd, 6));
    1a16:	fe 01       	movw	r30, r28
    1a18:	ed 59       	subi	r30, 0x9D	; 157
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	80 81       	ld	r24, Z
    1a1e:	82 95       	swap	r24
    1a20:	86 95       	lsr	r24
    1a22:	86 95       	lsr	r24
    1a24:	83 70       	andi	r24, 0x03	; 3
    1a26:	98 2f       	mov	r25, r24
    1a28:	91 70       	andi	r25, 0x01	; 1
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	65 e0       	ldi	r22, 0x05	; 5
    1a2e:	49 2f       	mov	r20, r25
    1a30:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_PIN_DB7, GET_BIT(cmd, 7));
    1a34:	fe 01       	movw	r30, r28
    1a36:	ed 59       	subi	r30, 0x9D	; 157
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	80 81       	ld	r24, Z
    1a3c:	98 2f       	mov	r25, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	99 27       	eor	r25, r25
    1a42:	99 1f       	adc	r25, r25
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	66 e0       	ldi	r22, 0x06	; 6
    1a48:	49 2f       	mov	r20, r25
    1a4a:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    1a4e:	fe 01       	movw	r30, r28
    1a50:	ed 5b       	subi	r30, 0xBD	; 189
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	a0 e8       	ldi	r26, 0x80	; 128
    1a5a:	bf e3       	ldi	r27, 0x3F	; 63
    1a5c:	80 83       	st	Z, r24
    1a5e:	91 83       	std	Z+1, r25	; 0x01
    1a60:	a2 83       	std	Z+2, r26	; 0x02
    1a62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a64:	8e 01       	movw	r16, r28
    1a66:	01 5c       	subi	r16, 0xC1	; 193
    1a68:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	ed 5b       	subi	r30, 0xBD	; 189
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	60 81       	ld	r22, Z
    1a72:	71 81       	ldd	r23, Z+1	; 0x01
    1a74:	82 81       	ldd	r24, Z+2	; 0x02
    1a76:	93 81       	ldd	r25, Z+3	; 0x03
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	4a e7       	ldi	r20, 0x7A	; 122
    1a7e:	55 e4       	ldi	r21, 0x45	; 69
    1a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	f8 01       	movw	r30, r16
    1a8a:	80 83       	st	Z, r24
    1a8c:	91 83       	std	Z+1, r25	; 0x01
    1a8e:	a2 83       	std	Z+2, r26	; 0x02
    1a90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a92:	fe 01       	movw	r30, r28
    1a94:	ff 96       	adiw	r30, 0x3f	; 63
    1a96:	60 81       	ld	r22, Z
    1a98:	71 81       	ldd	r23, Z+1	; 0x01
    1a9a:	82 81       	ldd	r24, Z+2	; 0x02
    1a9c:	93 81       	ldd	r25, Z+3	; 0x03
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e8       	ldi	r20, 0x80	; 128
    1aa4:	5f e3       	ldi	r21, 0x3F	; 63
    1aa6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aaa:	88 23       	and	r24, r24
    1aac:	2c f4       	brge	.+10     	; 0x1ab8 <LCD_sendCommand+0x3da>
		__ticks = 1;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9e af       	std	Y+62, r25	; 0x3e
    1ab4:	8d af       	std	Y+61, r24	; 0x3d
    1ab6:	46 c0       	rjmp	.+140    	; 0x1b44 <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    1ab8:	fe 01       	movw	r30, r28
    1aba:	ff 96       	adiw	r30, 0x3f	; 63
    1abc:	60 81       	ld	r22, Z
    1abe:	71 81       	ldd	r23, Z+1	; 0x01
    1ac0:	82 81       	ldd	r24, Z+2	; 0x02
    1ac2:	93 81       	ldd	r25, Z+3	; 0x03
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	3f ef       	ldi	r19, 0xFF	; 255
    1ac8:	4f e7       	ldi	r20, 0x7F	; 127
    1aca:	57 e4       	ldi	r21, 0x47	; 71
    1acc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ad0:	18 16       	cp	r1, r24
    1ad2:	64 f5       	brge	.+88     	; 0x1b2c <LCD_sendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	ed 5b       	subi	r30, 0xBD	; 189
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	60 81       	ld	r22, Z
    1adc:	71 81       	ldd	r23, Z+1	; 0x01
    1ade:	82 81       	ldd	r24, Z+2	; 0x02
    1ae0:	93 81       	ldd	r25, Z+3	; 0x03
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e2       	ldi	r20, 0x20	; 32
    1ae8:	51 e4       	ldi	r21, 0x41	; 65
    1aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	bc 01       	movw	r22, r24
    1af4:	cd 01       	movw	r24, r26
    1af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	9e af       	std	Y+62, r25	; 0x3e
    1b00:	8d af       	std	Y+61, r24	; 0x3d
    1b02:	0f c0       	rjmp	.+30     	; 0x1b22 <LCD_sendCommand+0x444>
    1b04:	80 e9       	ldi	r24, 0x90	; 144
    1b06:	91 e0       	ldi	r25, 0x01	; 1
    1b08:	9c af       	std	Y+60, r25	; 0x3c
    1b0a:	8b af       	std	Y+59, r24	; 0x3b
    1b0c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b0e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	f1 f7       	brne	.-4      	; 0x1b10 <LCD_sendCommand+0x432>
    1b14:	9c af       	std	Y+60, r25	; 0x3c
    1b16:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b18:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b1a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	9e af       	std	Y+62, r25	; 0x3e
    1b20:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b22:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b24:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	69 f7       	brne	.-38     	; 0x1b04 <LCD_sendCommand+0x426>
    1b2a:	16 c0       	rjmp	.+44     	; 0x1b58 <LCD_sendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	ff 96       	adiw	r30, 0x3f	; 63
    1b30:	60 81       	ld	r22, Z
    1b32:	71 81       	ldd	r23, Z+1	; 0x01
    1b34:	82 81       	ldd	r24, Z+2	; 0x02
    1b36:	93 81       	ldd	r25, Z+3	; 0x03
    1b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	9e af       	std	Y+62, r25	; 0x3e
    1b42:	8d af       	std	Y+61, r24	; 0x3d
    1b44:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b46:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b48:	9a af       	std	Y+58, r25	; 0x3a
    1b4a:	89 af       	std	Y+57, r24	; 0x39
    1b4c:	89 ad       	ldd	r24, Y+57	; 0x39
    1b4e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <LCD_sendCommand+0x472>
    1b54:	9a af       	std	Y+58, r25	; 0x3a
    1b56:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	62 e0       	ldi	r22, 0x02	; 2
    1b5c:	40 e0       	ldi	r20, 0x00	; 0
    1b5e:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	a0 e8       	ldi	r26, 0x80	; 128
    1b68:	bf e3       	ldi	r27, 0x3F	; 63
    1b6a:	8d ab       	std	Y+53, r24	; 0x35
    1b6c:	9e ab       	std	Y+54, r25	; 0x36
    1b6e:	af ab       	std	Y+55, r26	; 0x37
    1b70:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b72:	6d a9       	ldd	r22, Y+53	; 0x35
    1b74:	7e a9       	ldd	r23, Y+54	; 0x36
    1b76:	8f a9       	ldd	r24, Y+55	; 0x37
    1b78:	98 ad       	ldd	r25, Y+56	; 0x38
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	4a e7       	ldi	r20, 0x7A	; 122
    1b80:	55 e4       	ldi	r21, 0x45	; 69
    1b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	89 ab       	std	Y+49, r24	; 0x31
    1b8c:	9a ab       	std	Y+50, r25	; 0x32
    1b8e:	ab ab       	std	Y+51, r26	; 0x33
    1b90:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b92:	69 a9       	ldd	r22, Y+49	; 0x31
    1b94:	7a a9       	ldd	r23, Y+50	; 0x32
    1b96:	8b a9       	ldd	r24, Y+51	; 0x33
    1b98:	9c a9       	ldd	r25, Y+52	; 0x34
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e8       	ldi	r20, 0x80	; 128
    1ba0:	5f e3       	ldi	r21, 0x3F	; 63
    1ba2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ba6:	88 23       	and	r24, r24
    1ba8:	2c f4       	brge	.+10     	; 0x1bb4 <LCD_sendCommand+0x4d6>
		__ticks = 1;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	98 ab       	std	Y+48, r25	; 0x30
    1bb0:	8f a7       	std	Y+47, r24	; 0x2f
    1bb2:	3f c0       	rjmp	.+126    	; 0x1c32 <LCD_sendCommand+0x554>
	else if (__tmp > 65535)
    1bb4:	69 a9       	ldd	r22, Y+49	; 0x31
    1bb6:	7a a9       	ldd	r23, Y+50	; 0x32
    1bb8:	8b a9       	ldd	r24, Y+51	; 0x33
    1bba:	9c a9       	ldd	r25, Y+52	; 0x34
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	3f ef       	ldi	r19, 0xFF	; 255
    1bc0:	4f e7       	ldi	r20, 0x7F	; 127
    1bc2:	57 e4       	ldi	r21, 0x47	; 71
    1bc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bc8:	18 16       	cp	r1, r24
    1bca:	4c f5       	brge	.+82     	; 0x1c1e <LCD_sendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bcc:	6d a9       	ldd	r22, Y+53	; 0x35
    1bce:	7e a9       	ldd	r23, Y+54	; 0x36
    1bd0:	8f a9       	ldd	r24, Y+55	; 0x37
    1bd2:	98 ad       	ldd	r25, Y+56	; 0x38
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e2       	ldi	r20, 0x20	; 32
    1bda:	51 e4       	ldi	r21, 0x41	; 65
    1bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	bc 01       	movw	r22, r24
    1be6:	cd 01       	movw	r24, r26
    1be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	98 ab       	std	Y+48, r25	; 0x30
    1bf2:	8f a7       	std	Y+47, r24	; 0x2f
    1bf4:	0f c0       	rjmp	.+30     	; 0x1c14 <LCD_sendCommand+0x536>
    1bf6:	80 e9       	ldi	r24, 0x90	; 144
    1bf8:	91 e0       	ldi	r25, 0x01	; 1
    1bfa:	9e a7       	std	Y+46, r25	; 0x2e
    1bfc:	8d a7       	std	Y+45, r24	; 0x2d
    1bfe:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c00:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <LCD_sendCommand+0x524>
    1c06:	9e a7       	std	Y+46, r25	; 0x2e
    1c08:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c0c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	98 ab       	std	Y+48, r25	; 0x30
    1c12:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c16:	98 a9       	ldd	r25, Y+48	; 0x30
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	69 f7       	brne	.-38     	; 0x1bf6 <LCD_sendCommand+0x518>
    1c1c:	14 c0       	rjmp	.+40     	; 0x1c46 <LCD_sendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c20:	7a a9       	ldd	r23, Y+50	; 0x32
    1c22:	8b a9       	ldd	r24, Y+51	; 0x33
    1c24:	9c a9       	ldd	r25, Y+52	; 0x34
    1c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	98 ab       	std	Y+48, r25	; 0x30
    1c30:	8f a7       	std	Y+47, r24	; 0x2f
    1c32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c34:	98 a9       	ldd	r25, Y+48	; 0x30
    1c36:	9c a7       	std	Y+44, r25	; 0x2c
    1c38:	8b a7       	std	Y+43, r24	; 0x2b
    1c3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	f1 f7       	brne	.-4      	; 0x1c3e <LCD_sendCommand+0x560>
    1c42:	9c a7       	std	Y+44, r25	; 0x2c
    1c44:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	62 e0       	ldi	r22, 0x02	; 2
    1c4a:	41 e0       	ldi	r20, 0x01	; 1
    1c4c:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	a0 e8       	ldi	r26, 0x80	; 128
    1c56:	bf e3       	ldi	r27, 0x3F	; 63
    1c58:	8f a3       	std	Y+39, r24	; 0x27
    1c5a:	98 a7       	std	Y+40, r25	; 0x28
    1c5c:	a9 a7       	std	Y+41, r26	; 0x29
    1c5e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c60:	6f a1       	ldd	r22, Y+39	; 0x27
    1c62:	78 a5       	ldd	r23, Y+40	; 0x28
    1c64:	89 a5       	ldd	r24, Y+41	; 0x29
    1c66:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	4a e7       	ldi	r20, 0x7A	; 122
    1c6e:	55 e4       	ldi	r21, 0x45	; 69
    1c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	8b a3       	std	Y+35, r24	; 0x23
    1c7a:	9c a3       	std	Y+36, r25	; 0x24
    1c7c:	ad a3       	std	Y+37, r26	; 0x25
    1c7e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c80:	6b a1       	ldd	r22, Y+35	; 0x23
    1c82:	7c a1       	ldd	r23, Y+36	; 0x24
    1c84:	8d a1       	ldd	r24, Y+37	; 0x25
    1c86:	9e a1       	ldd	r25, Y+38	; 0x26
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e8       	ldi	r20, 0x80	; 128
    1c8e:	5f e3       	ldi	r21, 0x3F	; 63
    1c90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c94:	88 23       	and	r24, r24
    1c96:	2c f4       	brge	.+10     	; 0x1ca2 <LCD_sendCommand+0x5c4>
		__ticks = 1;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	9a a3       	std	Y+34, r25	; 0x22
    1c9e:	89 a3       	std	Y+33, r24	; 0x21
    1ca0:	3f c0       	rjmp	.+126    	; 0x1d20 <LCD_sendCommand+0x642>
	else if (__tmp > 65535)
    1ca2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ca4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ca6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ca8:	9e a1       	ldd	r25, Y+38	; 0x26
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	3f ef       	ldi	r19, 0xFF	; 255
    1cae:	4f e7       	ldi	r20, 0x7F	; 127
    1cb0:	57 e4       	ldi	r21, 0x47	; 71
    1cb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cb6:	18 16       	cp	r1, r24
    1cb8:	4c f5       	brge	.+82     	; 0x1d0c <LCD_sendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cba:	6f a1       	ldd	r22, Y+39	; 0x27
    1cbc:	78 a5       	ldd	r23, Y+40	; 0x28
    1cbe:	89 a5       	ldd	r24, Y+41	; 0x29
    1cc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e2       	ldi	r20, 0x20	; 32
    1cc8:	51 e4       	ldi	r21, 0x41	; 65
    1cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	bc 01       	movw	r22, r24
    1cd4:	cd 01       	movw	r24, r26
    1cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	9a a3       	std	Y+34, r25	; 0x22
    1ce0:	89 a3       	std	Y+33, r24	; 0x21
    1ce2:	0f c0       	rjmp	.+30     	; 0x1d02 <LCD_sendCommand+0x624>
    1ce4:	80 e9       	ldi	r24, 0x90	; 144
    1ce6:	91 e0       	ldi	r25, 0x01	; 1
    1ce8:	98 a3       	std	Y+32, r25	; 0x20
    1cea:	8f 8f       	std	Y+31, r24	; 0x1f
    1cec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cee:	98 a1       	ldd	r25, Y+32	; 0x20
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <LCD_sendCommand+0x612>
    1cf4:	98 a3       	std	Y+32, r25	; 0x20
    1cf6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf8:	89 a1       	ldd	r24, Y+33	; 0x21
    1cfa:	9a a1       	ldd	r25, Y+34	; 0x22
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	9a a3       	std	Y+34, r25	; 0x22
    1d00:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d02:	89 a1       	ldd	r24, Y+33	; 0x21
    1d04:	9a a1       	ldd	r25, Y+34	; 0x22
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	69 f7       	brne	.-38     	; 0x1ce4 <LCD_sendCommand+0x606>
    1d0a:	14 c0       	rjmp	.+40     	; 0x1d34 <LCD_sendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d0e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d10:	8d a1       	ldd	r24, Y+37	; 0x25
    1d12:	9e a1       	ldd	r25, Y+38	; 0x26
    1d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	9a a3       	std	Y+34, r25	; 0x22
    1d1e:	89 a3       	std	Y+33, r24	; 0x21
    1d20:	89 a1       	ldd	r24, Y+33	; 0x21
    1d22:	9a a1       	ldd	r25, Y+34	; 0x22
    1d24:	9e 8f       	std	Y+30, r25	; 0x1e
    1d26:	8d 8f       	std	Y+29, r24	; 0x1d
    1d28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <LCD_sendCommand+0x64e>
    1d30:	9e 8f       	std	Y+30, r25	; 0x1e
    1d32:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_DATA_PORT, LCD_PIN_DB4, GET_BIT(cmd, 0));
    1d34:	fe 01       	movw	r30, r28
    1d36:	ed 59       	subi	r30, 0x9D	; 157
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	80 81       	ld	r24, Z
    1d3c:	98 2f       	mov	r25, r24
    1d3e:	91 70       	andi	r25, 0x01	; 1
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	63 e0       	ldi	r22, 0x03	; 3
    1d44:	49 2f       	mov	r20, r25
    1d46:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_PIN_DB5, GET_BIT(cmd, 1));
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	ed 59       	subi	r30, 0x9D	; 157
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 81       	ld	r24, Z
    1d52:	86 95       	lsr	r24
    1d54:	98 2f       	mov	r25, r24
    1d56:	91 70       	andi	r25, 0x01	; 1
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	64 e0       	ldi	r22, 0x04	; 4
    1d5c:	49 2f       	mov	r20, r25
    1d5e:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_PIN_DB6, GET_BIT(cmd, 2));
    1d62:	fe 01       	movw	r30, r28
    1d64:	ed 59       	subi	r30, 0x9D	; 157
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	80 81       	ld	r24, Z
    1d6a:	86 95       	lsr	r24
    1d6c:	86 95       	lsr	r24
    1d6e:	98 2f       	mov	r25, r24
    1d70:	91 70       	andi	r25, 0x01	; 1
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	65 e0       	ldi	r22, 0x05	; 5
    1d76:	49 2f       	mov	r20, r25
    1d78:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_PIN_DB7, GET_BIT(cmd, 3));
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	ed 59       	subi	r30, 0x9D	; 157
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	80 81       	ld	r24, Z
    1d84:	86 95       	lsr	r24
    1d86:	86 95       	lsr	r24
    1d88:	86 95       	lsr	r24
    1d8a:	98 2f       	mov	r25, r24
    1d8c:	91 70       	andi	r25, 0x01	; 1
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	66 e0       	ldi	r22, 0x06	; 6
    1d92:	49 2f       	mov	r20, r25
    1d94:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	a0 e8       	ldi	r26, 0x80	; 128
    1d9e:	bf e3       	ldi	r27, 0x3F	; 63
    1da0:	89 8f       	std	Y+25, r24	; 0x19
    1da2:	9a 8f       	std	Y+26, r25	; 0x1a
    1da4:	ab 8f       	std	Y+27, r26	; 0x1b
    1da6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da8:	69 8d       	ldd	r22, Y+25	; 0x19
    1daa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	4a e7       	ldi	r20, 0x7A	; 122
    1db6:	55 e4       	ldi	r21, 0x45	; 69
    1db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	8d 8b       	std	Y+21, r24	; 0x15
    1dc2:	9e 8b       	std	Y+22, r25	; 0x16
    1dc4:	af 8b       	std	Y+23, r26	; 0x17
    1dc6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dca:	7e 89       	ldd	r23, Y+22	; 0x16
    1dcc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dce:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e8       	ldi	r20, 0x80	; 128
    1dd6:	5f e3       	ldi	r21, 0x3F	; 63
    1dd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ddc:	88 23       	and	r24, r24
    1dde:	2c f4       	brge	.+10     	; 0x1dea <LCD_sendCommand+0x70c>
		__ticks = 1;
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	9c 8b       	std	Y+20, r25	; 0x14
    1de6:	8b 8b       	std	Y+19, r24	; 0x13
    1de8:	3f c0       	rjmp	.+126    	; 0x1e68 <LCD_sendCommand+0x78a>
	else if (__tmp > 65535)
    1dea:	6d 89       	ldd	r22, Y+21	; 0x15
    1dec:	7e 89       	ldd	r23, Y+22	; 0x16
    1dee:	8f 89       	ldd	r24, Y+23	; 0x17
    1df0:	98 8d       	ldd	r25, Y+24	; 0x18
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	3f ef       	ldi	r19, 0xFF	; 255
    1df6:	4f e7       	ldi	r20, 0x7F	; 127
    1df8:	57 e4       	ldi	r21, 0x47	; 71
    1dfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dfe:	18 16       	cp	r1, r24
    1e00:	4c f5       	brge	.+82     	; 0x1e54 <LCD_sendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e02:	69 8d       	ldd	r22, Y+25	; 0x19
    1e04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e2       	ldi	r20, 0x20	; 32
    1e10:	51 e4       	ldi	r21, 0x41	; 65
    1e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	bc 01       	movw	r22, r24
    1e1c:	cd 01       	movw	r24, r26
    1e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	9c 8b       	std	Y+20, r25	; 0x14
    1e28:	8b 8b       	std	Y+19, r24	; 0x13
    1e2a:	0f c0       	rjmp	.+30     	; 0x1e4a <LCD_sendCommand+0x76c>
    1e2c:	80 e9       	ldi	r24, 0x90	; 144
    1e2e:	91 e0       	ldi	r25, 0x01	; 1
    1e30:	9a 8b       	std	Y+18, r25	; 0x12
    1e32:	89 8b       	std	Y+17, r24	; 0x11
    1e34:	89 89       	ldd	r24, Y+17	; 0x11
    1e36:	9a 89       	ldd	r25, Y+18	; 0x12
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <LCD_sendCommand+0x75a>
    1e3c:	9a 8b       	std	Y+18, r25	; 0x12
    1e3e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e40:	8b 89       	ldd	r24, Y+19	; 0x13
    1e42:	9c 89       	ldd	r25, Y+20	; 0x14
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	9c 8b       	std	Y+20, r25	; 0x14
    1e48:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	69 f7       	brne	.-38     	; 0x1e2c <LCD_sendCommand+0x74e>
    1e52:	14 c0       	rjmp	.+40     	; 0x1e7c <LCD_sendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e54:	6d 89       	ldd	r22, Y+21	; 0x15
    1e56:	7e 89       	ldd	r23, Y+22	; 0x16
    1e58:	8f 89       	ldd	r24, Y+23	; 0x17
    1e5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	9c 8b       	std	Y+20, r25	; 0x14
    1e66:	8b 8b       	std	Y+19, r24	; 0x13
    1e68:	8b 89       	ldd	r24, Y+19	; 0x13
    1e6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e6c:	98 8b       	std	Y+16, r25	; 0x10
    1e6e:	8f 87       	std	Y+15, r24	; 0x0f
    1e70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e72:	98 89       	ldd	r25, Y+16	; 0x10
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <LCD_sendCommand+0x796>
    1e78:	98 8b       	std	Y+16, r25	; 0x10
    1e7a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	62 e0       	ldi	r22, 0x02	; 2
    1e80:	40 e0       	ldi	r20, 0x00	; 0
    1e82:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	a0 e8       	ldi	r26, 0x80	; 128
    1e8c:	bf e3       	ldi	r27, 0x3F	; 63
    1e8e:	8b 87       	std	Y+11, r24	; 0x0b
    1e90:	9c 87       	std	Y+12, r25	; 0x0c
    1e92:	ad 87       	std	Y+13, r26	; 0x0d
    1e94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	4a e7       	ldi	r20, 0x7A	; 122
    1ea4:	55 e4       	ldi	r21, 0x45	; 69
    1ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	8f 83       	std	Y+7, r24	; 0x07
    1eb0:	98 87       	std	Y+8, r25	; 0x08
    1eb2:	a9 87       	std	Y+9, r26	; 0x09
    1eb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb8:	78 85       	ldd	r23, Y+8	; 0x08
    1eba:	89 85       	ldd	r24, Y+9	; 0x09
    1ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e8       	ldi	r20, 0x80	; 128
    1ec4:	5f e3       	ldi	r21, 0x3F	; 63
    1ec6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eca:	88 23       	and	r24, r24
    1ecc:	2c f4       	brge	.+10     	; 0x1ed8 <LCD_sendCommand+0x7fa>
		__ticks = 1;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	9e 83       	std	Y+6, r25	; 0x06
    1ed4:	8d 83       	std	Y+5, r24	; 0x05
    1ed6:	3f c0       	rjmp	.+126    	; 0x1f56 <LCD_sendCommand+0x878>
	else if (__tmp > 65535)
    1ed8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eda:	78 85       	ldd	r23, Y+8	; 0x08
    1edc:	89 85       	ldd	r24, Y+9	; 0x09
    1ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	3f ef       	ldi	r19, 0xFF	; 255
    1ee4:	4f e7       	ldi	r20, 0x7F	; 127
    1ee6:	57 e4       	ldi	r21, 0x47	; 71
    1ee8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eec:	18 16       	cp	r1, r24
    1eee:	4c f5       	brge	.+82     	; 0x1f42 <LCD_sendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e2       	ldi	r20, 0x20	; 32
    1efe:	51 e4       	ldi	r21, 0x41	; 65
    1f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	bc 01       	movw	r22, r24
    1f0a:	cd 01       	movw	r24, r26
    1f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	9e 83       	std	Y+6, r25	; 0x06
    1f16:	8d 83       	std	Y+5, r24	; 0x05
    1f18:	0f c0       	rjmp	.+30     	; 0x1f38 <LCD_sendCommand+0x85a>
    1f1a:	80 e9       	ldi	r24, 0x90	; 144
    1f1c:	91 e0       	ldi	r25, 0x01	; 1
    1f1e:	9c 83       	std	Y+4, r25	; 0x04
    1f20:	8b 83       	std	Y+3, r24	; 0x03
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	9c 81       	ldd	r25, Y+4	; 0x04
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	f1 f7       	brne	.-4      	; 0x1f26 <LCD_sendCommand+0x848>
    1f2a:	9c 83       	std	Y+4, r25	; 0x04
    1f2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	9e 83       	std	Y+6, r25	; 0x06
    1f36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f38:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	69 f7       	brne	.-38     	; 0x1f1a <LCD_sendCommand+0x83c>
    1f40:	14 c0       	rjmp	.+40     	; 0x1f6a <LCD_sendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f42:	6f 81       	ldd	r22, Y+7	; 0x07
    1f44:	78 85       	ldd	r23, Y+8	; 0x08
    1f46:	89 85       	ldd	r24, Y+9	; 0x09
    1f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	9e 83       	std	Y+6, r25	; 0x06
    1f54:	8d 83       	std	Y+5, r24	; 0x05
    1f56:	8d 81       	ldd	r24, Y+5	; 0x05
    1f58:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5a:	9a 83       	std	Y+2, r25	; 0x02
    1f5c:	89 83       	std	Y+1, r24	; 0x01
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	9a 81       	ldd	r25, Y+2	; 0x02
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <LCD_sendCommand+0x884>
    1f66:	9a 83       	std	Y+2, r25	; 0x02
    1f68:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT, cmd);
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
	_delay_ms(1);
#endif
}
    1f6a:	cd 59       	subi	r28, 0x9D	; 157
    1f6c:	df 4f       	sbci	r29, 0xFF	; 255
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	de bf       	out	0x3e, r29	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	cd bf       	out	0x3d, r28	; 61
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	1f 91       	pop	r17
    1f7e:	0f 91       	pop	r16
    1f80:	08 95       	ret

00001f82 <LCD_writeChar>:

void LCD_writeChar(uint8 data)
{
    1f82:	0f 93       	push	r16
    1f84:	1f 93       	push	r17
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	c3 56       	subi	r28, 0x63	; 99
    1f90:	d0 40       	sbci	r29, 0x00	; 0
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	ed 59       	subi	r30, 0x9D	; 157
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_HIGH);
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	61 e0       	ldi	r22, 0x01	; 1
    1fa8:	41 e0       	ldi	r20, 0x01	; 1
    1faa:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    1fae:	fe 01       	movw	r30, r28
    1fb0:	e1 5a       	subi	r30, 0xA1	; 161
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	a0 e8       	ldi	r26, 0x80	; 128
    1fba:	bf e3       	ldi	r27, 0x3F	; 63
    1fbc:	80 83       	st	Z, r24
    1fbe:	91 83       	std	Z+1, r25	; 0x01
    1fc0:	a2 83       	std	Z+2, r26	; 0x02
    1fc2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc4:	8e 01       	movw	r16, r28
    1fc6:	05 5a       	subi	r16, 0xA5	; 165
    1fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fca:	fe 01       	movw	r30, r28
    1fcc:	e1 5a       	subi	r30, 0xA1	; 161
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	60 81       	ld	r22, Z
    1fd2:	71 81       	ldd	r23, Z+1	; 0x01
    1fd4:	82 81       	ldd	r24, Z+2	; 0x02
    1fd6:	93 81       	ldd	r25, Z+3	; 0x03
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	4a e7       	ldi	r20, 0x7A	; 122
    1fde:	55 e4       	ldi	r21, 0x45	; 69
    1fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	f8 01       	movw	r30, r16
    1fea:	80 83       	st	Z, r24
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	a2 83       	std	Z+2, r26	; 0x02
    1ff0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e5 5a       	subi	r30, 0xA5	; 165
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	60 81       	ld	r22, Z
    1ffa:	71 81       	ldd	r23, Z+1	; 0x01
    1ffc:	82 81       	ldd	r24, Z+2	; 0x02
    1ffe:	93 81       	ldd	r25, Z+3	; 0x03
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e8       	ldi	r20, 0x80	; 128
    2006:	5f e3       	ldi	r21, 0x3F	; 63
    2008:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    200c:	88 23       	and	r24, r24
    200e:	44 f4       	brge	.+16     	; 0x2020 <LCD_writeChar+0x9e>
		__ticks = 1;
    2010:	fe 01       	movw	r30, r28
    2012:	e7 5a       	subi	r30, 0xA7	; 167
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	91 83       	std	Z+1, r25	; 0x01
    201c:	80 83       	st	Z, r24
    201e:	64 c0       	rjmp	.+200    	; 0x20e8 <LCD_writeChar+0x166>
	else if (__tmp > 65535)
    2020:	fe 01       	movw	r30, r28
    2022:	e5 5a       	subi	r30, 0xA5	; 165
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	60 81       	ld	r22, Z
    2028:	71 81       	ldd	r23, Z+1	; 0x01
    202a:	82 81       	ldd	r24, Z+2	; 0x02
    202c:	93 81       	ldd	r25, Z+3	; 0x03
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	3f ef       	ldi	r19, 0xFF	; 255
    2032:	4f e7       	ldi	r20, 0x7F	; 127
    2034:	57 e4       	ldi	r21, 0x47	; 71
    2036:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    203a:	18 16       	cp	r1, r24
    203c:	0c f0       	brlt	.+2      	; 0x2040 <LCD_writeChar+0xbe>
    203e:	43 c0       	rjmp	.+134    	; 0x20c6 <LCD_writeChar+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2040:	fe 01       	movw	r30, r28
    2042:	e1 5a       	subi	r30, 0xA1	; 161
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	60 81       	ld	r22, Z
    2048:	71 81       	ldd	r23, Z+1	; 0x01
    204a:	82 81       	ldd	r24, Z+2	; 0x02
    204c:	93 81       	ldd	r25, Z+3	; 0x03
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	40 e2       	ldi	r20, 0x20	; 32
    2054:	51 e4       	ldi	r21, 0x41	; 65
    2056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	8e 01       	movw	r16, r28
    2060:	07 5a       	subi	r16, 0xA7	; 167
    2062:	1f 4f       	sbci	r17, 0xFF	; 255
    2064:	bc 01       	movw	r22, r24
    2066:	cd 01       	movw	r24, r26
    2068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	f8 01       	movw	r30, r16
    2072:	91 83       	std	Z+1, r25	; 0x01
    2074:	80 83       	st	Z, r24
    2076:	1f c0       	rjmp	.+62     	; 0x20b6 <LCD_writeChar+0x134>
    2078:	fe 01       	movw	r30, r28
    207a:	e9 5a       	subi	r30, 0xA9	; 169
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	80 e9       	ldi	r24, 0x90	; 144
    2080:	91 e0       	ldi	r25, 0x01	; 1
    2082:	91 83       	std	Z+1, r25	; 0x01
    2084:	80 83       	st	Z, r24
    2086:	fe 01       	movw	r30, r28
    2088:	e9 5a       	subi	r30, 0xA9	; 169
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	80 81       	ld	r24, Z
    208e:	91 81       	ldd	r25, Z+1	; 0x01
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <LCD_writeChar+0x10e>
    2094:	fe 01       	movw	r30, r28
    2096:	e9 5a       	subi	r30, 0xA9	; 169
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	91 83       	std	Z+1, r25	; 0x01
    209c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209e:	de 01       	movw	r26, r28
    20a0:	a7 5a       	subi	r26, 0xA7	; 167
    20a2:	bf 4f       	sbci	r27, 0xFF	; 255
    20a4:	fe 01       	movw	r30, r28
    20a6:	e7 5a       	subi	r30, 0xA7	; 167
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	80 81       	ld	r24, Z
    20ac:	91 81       	ldd	r25, Z+1	; 0x01
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	11 96       	adiw	r26, 0x01	; 1
    20b2:	9c 93       	st	X, r25
    20b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b6:	fe 01       	movw	r30, r28
    20b8:	e7 5a       	subi	r30, 0xA7	; 167
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	80 81       	ld	r24, Z
    20be:	91 81       	ldd	r25, Z+1	; 0x01
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	d1 f6       	brne	.-76     	; 0x2078 <LCD_writeChar+0xf6>
    20c4:	27 c0       	rjmp	.+78     	; 0x2114 <LCD_writeChar+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c6:	8e 01       	movw	r16, r28
    20c8:	07 5a       	subi	r16, 0xA7	; 167
    20ca:	1f 4f       	sbci	r17, 0xFF	; 255
    20cc:	fe 01       	movw	r30, r28
    20ce:	e5 5a       	subi	r30, 0xA5	; 165
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	60 81       	ld	r22, Z
    20d4:	71 81       	ldd	r23, Z+1	; 0x01
    20d6:	82 81       	ldd	r24, Z+2	; 0x02
    20d8:	93 81       	ldd	r25, Z+3	; 0x03
    20da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	f8 01       	movw	r30, r16
    20e4:	91 83       	std	Z+1, r25	; 0x01
    20e6:	80 83       	st	Z, r24
    20e8:	de 01       	movw	r26, r28
    20ea:	ab 5a       	subi	r26, 0xAB	; 171
    20ec:	bf 4f       	sbci	r27, 0xFF	; 255
    20ee:	fe 01       	movw	r30, r28
    20f0:	e7 5a       	subi	r30, 0xA7	; 167
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	80 81       	ld	r24, Z
    20f6:	91 81       	ldd	r25, Z+1	; 0x01
    20f8:	8d 93       	st	X+, r24
    20fa:	9c 93       	st	X, r25
    20fc:	fe 01       	movw	r30, r28
    20fe:	eb 5a       	subi	r30, 0xAB	; 171
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	80 81       	ld	r24, Z
    2104:	91 81       	ldd	r25, Z+1	; 0x01
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	f1 f7       	brne	.-4      	; 0x2106 <LCD_writeChar+0x184>
    210a:	fe 01       	movw	r30, r28
    210c:	eb 5a       	subi	r30, 0xAB	; 171
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	91 83       	std	Z+1, r25	; 0x01
    2112:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	62 e0       	ldi	r22, 0x02	; 2
    2118:	41 e0       	ldi	r20, 0x01	; 1
    211a:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    211e:	fe 01       	movw	r30, r28
    2120:	ef 5a       	subi	r30, 0xAF	; 175
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	a0 e8       	ldi	r26, 0x80	; 128
    212a:	bf e3       	ldi	r27, 0x3F	; 63
    212c:	80 83       	st	Z, r24
    212e:	91 83       	std	Z+1, r25	; 0x01
    2130:	a2 83       	std	Z+2, r26	; 0x02
    2132:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2134:	8e 01       	movw	r16, r28
    2136:	03 5b       	subi	r16, 0xB3	; 179
    2138:	1f 4f       	sbci	r17, 0xFF	; 255
    213a:	fe 01       	movw	r30, r28
    213c:	ef 5a       	subi	r30, 0xAF	; 175
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	60 81       	ld	r22, Z
    2142:	71 81       	ldd	r23, Z+1	; 0x01
    2144:	82 81       	ldd	r24, Z+2	; 0x02
    2146:	93 81       	ldd	r25, Z+3	; 0x03
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	4a e7       	ldi	r20, 0x7A	; 122
    214e:	55 e4       	ldi	r21, 0x45	; 69
    2150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	f8 01       	movw	r30, r16
    215a:	80 83       	st	Z, r24
    215c:	91 83       	std	Z+1, r25	; 0x01
    215e:	a2 83       	std	Z+2, r26	; 0x02
    2160:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2162:	fe 01       	movw	r30, r28
    2164:	e3 5b       	subi	r30, 0xB3	; 179
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	60 81       	ld	r22, Z
    216a:	71 81       	ldd	r23, Z+1	; 0x01
    216c:	82 81       	ldd	r24, Z+2	; 0x02
    216e:	93 81       	ldd	r25, Z+3	; 0x03
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e8       	ldi	r20, 0x80	; 128
    2176:	5f e3       	ldi	r21, 0x3F	; 63
    2178:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    217c:	88 23       	and	r24, r24
    217e:	44 f4       	brge	.+16     	; 0x2190 <LCD_writeChar+0x20e>
		__ticks = 1;
    2180:	fe 01       	movw	r30, r28
    2182:	e5 5b       	subi	r30, 0xB5	; 181
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	91 83       	std	Z+1, r25	; 0x01
    218c:	80 83       	st	Z, r24
    218e:	64 c0       	rjmp	.+200    	; 0x2258 <LCD_writeChar+0x2d6>
	else if (__tmp > 65535)
    2190:	fe 01       	movw	r30, r28
    2192:	e3 5b       	subi	r30, 0xB3	; 179
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	60 81       	ld	r22, Z
    2198:	71 81       	ldd	r23, Z+1	; 0x01
    219a:	82 81       	ldd	r24, Z+2	; 0x02
    219c:	93 81       	ldd	r25, Z+3	; 0x03
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	3f ef       	ldi	r19, 0xFF	; 255
    21a2:	4f e7       	ldi	r20, 0x7F	; 127
    21a4:	57 e4       	ldi	r21, 0x47	; 71
    21a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21aa:	18 16       	cp	r1, r24
    21ac:	0c f0       	brlt	.+2      	; 0x21b0 <LCD_writeChar+0x22e>
    21ae:	43 c0       	rjmp	.+134    	; 0x2236 <LCD_writeChar+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b0:	fe 01       	movw	r30, r28
    21b2:	ef 5a       	subi	r30, 0xAF	; 175
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	60 81       	ld	r22, Z
    21b8:	71 81       	ldd	r23, Z+1	; 0x01
    21ba:	82 81       	ldd	r24, Z+2	; 0x02
    21bc:	93 81       	ldd	r25, Z+3	; 0x03
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e2       	ldi	r20, 0x20	; 32
    21c4:	51 e4       	ldi	r21, 0x41	; 65
    21c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	8e 01       	movw	r16, r28
    21d0:	05 5b       	subi	r16, 0xB5	; 181
    21d2:	1f 4f       	sbci	r17, 0xFF	; 255
    21d4:	bc 01       	movw	r22, r24
    21d6:	cd 01       	movw	r24, r26
    21d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	f8 01       	movw	r30, r16
    21e2:	91 83       	std	Z+1, r25	; 0x01
    21e4:	80 83       	st	Z, r24
    21e6:	1f c0       	rjmp	.+62     	; 0x2226 <LCD_writeChar+0x2a4>
    21e8:	fe 01       	movw	r30, r28
    21ea:	e7 5b       	subi	r30, 0xB7	; 183
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	80 e9       	ldi	r24, 0x90	; 144
    21f0:	91 e0       	ldi	r25, 0x01	; 1
    21f2:	91 83       	std	Z+1, r25	; 0x01
    21f4:	80 83       	st	Z, r24
    21f6:	fe 01       	movw	r30, r28
    21f8:	e7 5b       	subi	r30, 0xB7	; 183
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	80 81       	ld	r24, Z
    21fe:	91 81       	ldd	r25, Z+1	; 0x01
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	f1 f7       	brne	.-4      	; 0x2200 <LCD_writeChar+0x27e>
    2204:	fe 01       	movw	r30, r28
    2206:	e7 5b       	subi	r30, 0xB7	; 183
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220e:	de 01       	movw	r26, r28
    2210:	a5 5b       	subi	r26, 0xB5	; 181
    2212:	bf 4f       	sbci	r27, 0xFF	; 255
    2214:	fe 01       	movw	r30, r28
    2216:	e5 5b       	subi	r30, 0xB5	; 181
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	80 81       	ld	r24, Z
    221c:	91 81       	ldd	r25, Z+1	; 0x01
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	11 96       	adiw	r26, 0x01	; 1
    2222:	9c 93       	st	X, r25
    2224:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2226:	fe 01       	movw	r30, r28
    2228:	e5 5b       	subi	r30, 0xB5	; 181
    222a:	ff 4f       	sbci	r31, 0xFF	; 255
    222c:	80 81       	ld	r24, Z
    222e:	91 81       	ldd	r25, Z+1	; 0x01
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	d1 f6       	brne	.-76     	; 0x21e8 <LCD_writeChar+0x266>
    2234:	27 c0       	rjmp	.+78     	; 0x2284 <LCD_writeChar+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2236:	8e 01       	movw	r16, r28
    2238:	05 5b       	subi	r16, 0xB5	; 181
    223a:	1f 4f       	sbci	r17, 0xFF	; 255
    223c:	fe 01       	movw	r30, r28
    223e:	e3 5b       	subi	r30, 0xB3	; 179
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	60 81       	ld	r22, Z
    2244:	71 81       	ldd	r23, Z+1	; 0x01
    2246:	82 81       	ldd	r24, Z+2	; 0x02
    2248:	93 81       	ldd	r25, Z+3	; 0x03
    224a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	f8 01       	movw	r30, r16
    2254:	91 83       	std	Z+1, r25	; 0x01
    2256:	80 83       	st	Z, r24
    2258:	de 01       	movw	r26, r28
    225a:	a9 5b       	subi	r26, 0xB9	; 185
    225c:	bf 4f       	sbci	r27, 0xFF	; 255
    225e:	fe 01       	movw	r30, r28
    2260:	e5 5b       	subi	r30, 0xB5	; 181
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	80 81       	ld	r24, Z
    2266:	91 81       	ldd	r25, Z+1	; 0x01
    2268:	8d 93       	st	X+, r24
    226a:	9c 93       	st	X, r25
    226c:	fe 01       	movw	r30, r28
    226e:	e9 5b       	subi	r30, 0xB9	; 185
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	80 81       	ld	r24, Z
    2274:	91 81       	ldd	r25, Z+1	; 0x01
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	f1 f7       	brne	.-4      	; 0x2276 <LCD_writeChar+0x2f4>
    227a:	fe 01       	movw	r30, r28
    227c:	e9 5b       	subi	r30, 0xB9	; 185
    227e:	ff 4f       	sbci	r31, 0xFF	; 255
    2280:	91 83       	std	Z+1, r25	; 0x01
    2282:	80 83       	st	Z, r24
	_delay_ms(1);

#if (LCD_MODE_BITS == 4)
	GPIO_writePin(LCD_DATA_PORT, LCD_PIN_DB4, GET_BIT(data, 4));
    2284:	fe 01       	movw	r30, r28
    2286:	ed 59       	subi	r30, 0x9D	; 157
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	80 81       	ld	r24, Z
    228c:	82 95       	swap	r24
    228e:	8f 70       	andi	r24, 0x0F	; 15
    2290:	98 2f       	mov	r25, r24
    2292:	91 70       	andi	r25, 0x01	; 1
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	63 e0       	ldi	r22, 0x03	; 3
    2298:	49 2f       	mov	r20, r25
    229a:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_PIN_DB5, GET_BIT(data, 5));
    229e:	fe 01       	movw	r30, r28
    22a0:	ed 59       	subi	r30, 0x9D	; 157
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 81       	ld	r24, Z
    22a6:	82 95       	swap	r24
    22a8:	86 95       	lsr	r24
    22aa:	87 70       	andi	r24, 0x07	; 7
    22ac:	98 2f       	mov	r25, r24
    22ae:	91 70       	andi	r25, 0x01	; 1
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	64 e0       	ldi	r22, 0x04	; 4
    22b4:	49 2f       	mov	r20, r25
    22b6:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_PIN_DB6, GET_BIT(data, 6));
    22ba:	fe 01       	movw	r30, r28
    22bc:	ed 59       	subi	r30, 0x9D	; 157
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	80 81       	ld	r24, Z
    22c2:	82 95       	swap	r24
    22c4:	86 95       	lsr	r24
    22c6:	86 95       	lsr	r24
    22c8:	83 70       	andi	r24, 0x03	; 3
    22ca:	98 2f       	mov	r25, r24
    22cc:	91 70       	andi	r25, 0x01	; 1
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	65 e0       	ldi	r22, 0x05	; 5
    22d2:	49 2f       	mov	r20, r25
    22d4:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_PIN_DB7, GET_BIT(data, 7));
    22d8:	fe 01       	movw	r30, r28
    22da:	ed 59       	subi	r30, 0x9D	; 157
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	80 81       	ld	r24, Z
    22e0:	98 2f       	mov	r25, r24
    22e2:	99 1f       	adc	r25, r25
    22e4:	99 27       	eor	r25, r25
    22e6:	99 1f       	adc	r25, r25
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	66 e0       	ldi	r22, 0x06	; 6
    22ec:	49 2f       	mov	r20, r25
    22ee:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    22f2:	fe 01       	movw	r30, r28
    22f4:	ed 5b       	subi	r30, 0xBD	; 189
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	a0 e8       	ldi	r26, 0x80	; 128
    22fe:	bf e3       	ldi	r27, 0x3F	; 63
    2300:	80 83       	st	Z, r24
    2302:	91 83       	std	Z+1, r25	; 0x01
    2304:	a2 83       	std	Z+2, r26	; 0x02
    2306:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2308:	8e 01       	movw	r16, r28
    230a:	01 5c       	subi	r16, 0xC1	; 193
    230c:	1f 4f       	sbci	r17, 0xFF	; 255
    230e:	fe 01       	movw	r30, r28
    2310:	ed 5b       	subi	r30, 0xBD	; 189
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	60 81       	ld	r22, Z
    2316:	71 81       	ldd	r23, Z+1	; 0x01
    2318:	82 81       	ldd	r24, Z+2	; 0x02
    231a:	93 81       	ldd	r25, Z+3	; 0x03
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	4a e7       	ldi	r20, 0x7A	; 122
    2322:	55 e4       	ldi	r21, 0x45	; 69
    2324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	f8 01       	movw	r30, r16
    232e:	80 83       	st	Z, r24
    2330:	91 83       	std	Z+1, r25	; 0x01
    2332:	a2 83       	std	Z+2, r26	; 0x02
    2334:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2336:	fe 01       	movw	r30, r28
    2338:	ff 96       	adiw	r30, 0x3f	; 63
    233a:	60 81       	ld	r22, Z
    233c:	71 81       	ldd	r23, Z+1	; 0x01
    233e:	82 81       	ldd	r24, Z+2	; 0x02
    2340:	93 81       	ldd	r25, Z+3	; 0x03
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	40 e8       	ldi	r20, 0x80	; 128
    2348:	5f e3       	ldi	r21, 0x3F	; 63
    234a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    234e:	88 23       	and	r24, r24
    2350:	2c f4       	brge	.+10     	; 0x235c <LCD_writeChar+0x3da>
		__ticks = 1;
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	9e af       	std	Y+62, r25	; 0x3e
    2358:	8d af       	std	Y+61, r24	; 0x3d
    235a:	46 c0       	rjmp	.+140    	; 0x23e8 <LCD_writeChar+0x466>
	else if (__tmp > 65535)
    235c:	fe 01       	movw	r30, r28
    235e:	ff 96       	adiw	r30, 0x3f	; 63
    2360:	60 81       	ld	r22, Z
    2362:	71 81       	ldd	r23, Z+1	; 0x01
    2364:	82 81       	ldd	r24, Z+2	; 0x02
    2366:	93 81       	ldd	r25, Z+3	; 0x03
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	3f ef       	ldi	r19, 0xFF	; 255
    236c:	4f e7       	ldi	r20, 0x7F	; 127
    236e:	57 e4       	ldi	r21, 0x47	; 71
    2370:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2374:	18 16       	cp	r1, r24
    2376:	64 f5       	brge	.+88     	; 0x23d0 <LCD_writeChar+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2378:	fe 01       	movw	r30, r28
    237a:	ed 5b       	subi	r30, 0xBD	; 189
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	60 81       	ld	r22, Z
    2380:	71 81       	ldd	r23, Z+1	; 0x01
    2382:	82 81       	ldd	r24, Z+2	; 0x02
    2384:	93 81       	ldd	r25, Z+3	; 0x03
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e2       	ldi	r20, 0x20	; 32
    238c:	51 e4       	ldi	r21, 0x41	; 65
    238e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	bc 01       	movw	r22, r24
    2398:	cd 01       	movw	r24, r26
    239a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	9e af       	std	Y+62, r25	; 0x3e
    23a4:	8d af       	std	Y+61, r24	; 0x3d
    23a6:	0f c0       	rjmp	.+30     	; 0x23c6 <LCD_writeChar+0x444>
    23a8:	80 e9       	ldi	r24, 0x90	; 144
    23aa:	91 e0       	ldi	r25, 0x01	; 1
    23ac:	9c af       	std	Y+60, r25	; 0x3c
    23ae:	8b af       	std	Y+59, r24	; 0x3b
    23b0:	8b ad       	ldd	r24, Y+59	; 0x3b
    23b2:	9c ad       	ldd	r25, Y+60	; 0x3c
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	f1 f7       	brne	.-4      	; 0x23b4 <LCD_writeChar+0x432>
    23b8:	9c af       	std	Y+60, r25	; 0x3c
    23ba:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    23be:	9e ad       	ldd	r25, Y+62	; 0x3e
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	9e af       	std	Y+62, r25	; 0x3e
    23c4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    23c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    23ca:	00 97       	sbiw	r24, 0x00	; 0
    23cc:	69 f7       	brne	.-38     	; 0x23a8 <LCD_writeChar+0x426>
    23ce:	16 c0       	rjmp	.+44     	; 0x23fc <LCD_writeChar+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d0:	fe 01       	movw	r30, r28
    23d2:	ff 96       	adiw	r30, 0x3f	; 63
    23d4:	60 81       	ld	r22, Z
    23d6:	71 81       	ldd	r23, Z+1	; 0x01
    23d8:	82 81       	ldd	r24, Z+2	; 0x02
    23da:	93 81       	ldd	r25, Z+3	; 0x03
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	9e af       	std	Y+62, r25	; 0x3e
    23e6:	8d af       	std	Y+61, r24	; 0x3d
    23e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    23ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    23ec:	9a af       	std	Y+58, r25	; 0x3a
    23ee:	89 af       	std	Y+57, r24	; 0x39
    23f0:	89 ad       	ldd	r24, Y+57	; 0x39
    23f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <LCD_writeChar+0x472>
    23f8:	9a af       	std	Y+58, r25	; 0x3a
    23fa:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	62 e0       	ldi	r22, 0x02	; 2
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	a0 e8       	ldi	r26, 0x80	; 128
    240c:	bf e3       	ldi	r27, 0x3F	; 63
    240e:	8d ab       	std	Y+53, r24	; 0x35
    2410:	9e ab       	std	Y+54, r25	; 0x36
    2412:	af ab       	std	Y+55, r26	; 0x37
    2414:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2416:	6d a9       	ldd	r22, Y+53	; 0x35
    2418:	7e a9       	ldd	r23, Y+54	; 0x36
    241a:	8f a9       	ldd	r24, Y+55	; 0x37
    241c:	98 ad       	ldd	r25, Y+56	; 0x38
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	4a e7       	ldi	r20, 0x7A	; 122
    2424:	55 e4       	ldi	r21, 0x45	; 69
    2426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	89 ab       	std	Y+49, r24	; 0x31
    2430:	9a ab       	std	Y+50, r25	; 0x32
    2432:	ab ab       	std	Y+51, r26	; 0x33
    2434:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2436:	69 a9       	ldd	r22, Y+49	; 0x31
    2438:	7a a9       	ldd	r23, Y+50	; 0x32
    243a:	8b a9       	ldd	r24, Y+51	; 0x33
    243c:	9c a9       	ldd	r25, Y+52	; 0x34
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	40 e8       	ldi	r20, 0x80	; 128
    2444:	5f e3       	ldi	r21, 0x3F	; 63
    2446:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    244a:	88 23       	and	r24, r24
    244c:	2c f4       	brge	.+10     	; 0x2458 <LCD_writeChar+0x4d6>
		__ticks = 1;
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	98 ab       	std	Y+48, r25	; 0x30
    2454:	8f a7       	std	Y+47, r24	; 0x2f
    2456:	3f c0       	rjmp	.+126    	; 0x24d6 <LCD_writeChar+0x554>
	else if (__tmp > 65535)
    2458:	69 a9       	ldd	r22, Y+49	; 0x31
    245a:	7a a9       	ldd	r23, Y+50	; 0x32
    245c:	8b a9       	ldd	r24, Y+51	; 0x33
    245e:	9c a9       	ldd	r25, Y+52	; 0x34
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	3f ef       	ldi	r19, 0xFF	; 255
    2464:	4f e7       	ldi	r20, 0x7F	; 127
    2466:	57 e4       	ldi	r21, 0x47	; 71
    2468:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    246c:	18 16       	cp	r1, r24
    246e:	4c f5       	brge	.+82     	; 0x24c2 <LCD_writeChar+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2470:	6d a9       	ldd	r22, Y+53	; 0x35
    2472:	7e a9       	ldd	r23, Y+54	; 0x36
    2474:	8f a9       	ldd	r24, Y+55	; 0x37
    2476:	98 ad       	ldd	r25, Y+56	; 0x38
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	40 e2       	ldi	r20, 0x20	; 32
    247e:	51 e4       	ldi	r21, 0x41	; 65
    2480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	bc 01       	movw	r22, r24
    248a:	cd 01       	movw	r24, r26
    248c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	98 ab       	std	Y+48, r25	; 0x30
    2496:	8f a7       	std	Y+47, r24	; 0x2f
    2498:	0f c0       	rjmp	.+30     	; 0x24b8 <LCD_writeChar+0x536>
    249a:	80 e9       	ldi	r24, 0x90	; 144
    249c:	91 e0       	ldi	r25, 0x01	; 1
    249e:	9e a7       	std	Y+46, r25	; 0x2e
    24a0:	8d a7       	std	Y+45, r24	; 0x2d
    24a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    24a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <LCD_writeChar+0x524>
    24aa:	9e a7       	std	Y+46, r25	; 0x2e
    24ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    24b0:	98 a9       	ldd	r25, Y+48	; 0x30
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	98 ab       	std	Y+48, r25	; 0x30
    24b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ba:	98 a9       	ldd	r25, Y+48	; 0x30
    24bc:	00 97       	sbiw	r24, 0x00	; 0
    24be:	69 f7       	brne	.-38     	; 0x249a <LCD_writeChar+0x518>
    24c0:	14 c0       	rjmp	.+40     	; 0x24ea <LCD_writeChar+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c2:	69 a9       	ldd	r22, Y+49	; 0x31
    24c4:	7a a9       	ldd	r23, Y+50	; 0x32
    24c6:	8b a9       	ldd	r24, Y+51	; 0x33
    24c8:	9c a9       	ldd	r25, Y+52	; 0x34
    24ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	98 ab       	std	Y+48, r25	; 0x30
    24d4:	8f a7       	std	Y+47, r24	; 0x2f
    24d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24d8:	98 a9       	ldd	r25, Y+48	; 0x30
    24da:	9c a7       	std	Y+44, r25	; 0x2c
    24dc:	8b a7       	std	Y+43, r24	; 0x2b
    24de:	8b a5       	ldd	r24, Y+43	; 0x2b
    24e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <LCD_writeChar+0x560>
    24e6:	9c a7       	std	Y+44, r25	; 0x2c
    24e8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	62 e0       	ldi	r22, 0x02	; 2
    24ee:	41 e0       	ldi	r20, 0x01	; 1
    24f0:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	a0 e8       	ldi	r26, 0x80	; 128
    24fa:	bf e3       	ldi	r27, 0x3F	; 63
    24fc:	8f a3       	std	Y+39, r24	; 0x27
    24fe:	98 a7       	std	Y+40, r25	; 0x28
    2500:	a9 a7       	std	Y+41, r26	; 0x29
    2502:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2504:	6f a1       	ldd	r22, Y+39	; 0x27
    2506:	78 a5       	ldd	r23, Y+40	; 0x28
    2508:	89 a5       	ldd	r24, Y+41	; 0x29
    250a:	9a a5       	ldd	r25, Y+42	; 0x2a
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	4a e7       	ldi	r20, 0x7A	; 122
    2512:	55 e4       	ldi	r21, 0x45	; 69
    2514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	8b a3       	std	Y+35, r24	; 0x23
    251e:	9c a3       	std	Y+36, r25	; 0x24
    2520:	ad a3       	std	Y+37, r26	; 0x25
    2522:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2524:	6b a1       	ldd	r22, Y+35	; 0x23
    2526:	7c a1       	ldd	r23, Y+36	; 0x24
    2528:	8d a1       	ldd	r24, Y+37	; 0x25
    252a:	9e a1       	ldd	r25, Y+38	; 0x26
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	40 e8       	ldi	r20, 0x80	; 128
    2532:	5f e3       	ldi	r21, 0x3F	; 63
    2534:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2538:	88 23       	and	r24, r24
    253a:	2c f4       	brge	.+10     	; 0x2546 <LCD_writeChar+0x5c4>
		__ticks = 1;
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	9a a3       	std	Y+34, r25	; 0x22
    2542:	89 a3       	std	Y+33, r24	; 0x21
    2544:	3f c0       	rjmp	.+126    	; 0x25c4 <LCD_writeChar+0x642>
	else if (__tmp > 65535)
    2546:	6b a1       	ldd	r22, Y+35	; 0x23
    2548:	7c a1       	ldd	r23, Y+36	; 0x24
    254a:	8d a1       	ldd	r24, Y+37	; 0x25
    254c:	9e a1       	ldd	r25, Y+38	; 0x26
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	3f ef       	ldi	r19, 0xFF	; 255
    2552:	4f e7       	ldi	r20, 0x7F	; 127
    2554:	57 e4       	ldi	r21, 0x47	; 71
    2556:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    255a:	18 16       	cp	r1, r24
    255c:	4c f5       	brge	.+82     	; 0x25b0 <LCD_writeChar+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255e:	6f a1       	ldd	r22, Y+39	; 0x27
    2560:	78 a5       	ldd	r23, Y+40	; 0x28
    2562:	89 a5       	ldd	r24, Y+41	; 0x29
    2564:	9a a5       	ldd	r25, Y+42	; 0x2a
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e2       	ldi	r20, 0x20	; 32
    256c:	51 e4       	ldi	r21, 0x41	; 65
    256e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	bc 01       	movw	r22, r24
    2578:	cd 01       	movw	r24, r26
    257a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	9a a3       	std	Y+34, r25	; 0x22
    2584:	89 a3       	std	Y+33, r24	; 0x21
    2586:	0f c0       	rjmp	.+30     	; 0x25a6 <LCD_writeChar+0x624>
    2588:	80 e9       	ldi	r24, 0x90	; 144
    258a:	91 e0       	ldi	r25, 0x01	; 1
    258c:	98 a3       	std	Y+32, r25	; 0x20
    258e:	8f 8f       	std	Y+31, r24	; 0x1f
    2590:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2592:	98 a1       	ldd	r25, Y+32	; 0x20
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	f1 f7       	brne	.-4      	; 0x2594 <LCD_writeChar+0x612>
    2598:	98 a3       	std	Y+32, r25	; 0x20
    259a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259c:	89 a1       	ldd	r24, Y+33	; 0x21
    259e:	9a a1       	ldd	r25, Y+34	; 0x22
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	9a a3       	std	Y+34, r25	; 0x22
    25a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a6:	89 a1       	ldd	r24, Y+33	; 0x21
    25a8:	9a a1       	ldd	r25, Y+34	; 0x22
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	69 f7       	brne	.-38     	; 0x2588 <LCD_writeChar+0x606>
    25ae:	14 c0       	rjmp	.+40     	; 0x25d8 <LCD_writeChar+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b0:	6b a1       	ldd	r22, Y+35	; 0x23
    25b2:	7c a1       	ldd	r23, Y+36	; 0x24
    25b4:	8d a1       	ldd	r24, Y+37	; 0x25
    25b6:	9e a1       	ldd	r25, Y+38	; 0x26
    25b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	9a a3       	std	Y+34, r25	; 0x22
    25c2:	89 a3       	std	Y+33, r24	; 0x21
    25c4:	89 a1       	ldd	r24, Y+33	; 0x21
    25c6:	9a a1       	ldd	r25, Y+34	; 0x22
    25c8:	9e 8f       	std	Y+30, r25	; 0x1e
    25ca:	8d 8f       	std	Y+29, r24	; 0x1d
    25cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <LCD_writeChar+0x64e>
    25d4:	9e 8f       	std	Y+30, r25	; 0x1e
    25d6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_DATA_PORT, LCD_PIN_DB4, GET_BIT(data, 0));
    25d8:	fe 01       	movw	r30, r28
    25da:	ed 59       	subi	r30, 0x9D	; 157
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	80 81       	ld	r24, Z
    25e0:	98 2f       	mov	r25, r24
    25e2:	91 70       	andi	r25, 0x01	; 1
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	63 e0       	ldi	r22, 0x03	; 3
    25e8:	49 2f       	mov	r20, r25
    25ea:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_PIN_DB5, GET_BIT(data, 1));
    25ee:	fe 01       	movw	r30, r28
    25f0:	ed 59       	subi	r30, 0x9D	; 157
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	80 81       	ld	r24, Z
    25f6:	86 95       	lsr	r24
    25f8:	98 2f       	mov	r25, r24
    25fa:	91 70       	andi	r25, 0x01	; 1
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	64 e0       	ldi	r22, 0x04	; 4
    2600:	49 2f       	mov	r20, r25
    2602:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_PIN_DB6, GET_BIT(data, 2));
    2606:	fe 01       	movw	r30, r28
    2608:	ed 59       	subi	r30, 0x9D	; 157
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	80 81       	ld	r24, Z
    260e:	86 95       	lsr	r24
    2610:	86 95       	lsr	r24
    2612:	98 2f       	mov	r25, r24
    2614:	91 70       	andi	r25, 0x01	; 1
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	65 e0       	ldi	r22, 0x05	; 5
    261a:	49 2f       	mov	r20, r25
    261c:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_PIN_DB7, GET_BIT(data, 3));
    2620:	fe 01       	movw	r30, r28
    2622:	ed 59       	subi	r30, 0x9D	; 157
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	80 81       	ld	r24, Z
    2628:	86 95       	lsr	r24
    262a:	86 95       	lsr	r24
    262c:	86 95       	lsr	r24
    262e:	98 2f       	mov	r25, r24
    2630:	91 70       	andi	r25, 0x01	; 1
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	66 e0       	ldi	r22, 0x06	; 6
    2636:	49 2f       	mov	r20, r25
    2638:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	a0 e8       	ldi	r26, 0x80	; 128
    2642:	bf e3       	ldi	r27, 0x3F	; 63
    2644:	89 8f       	std	Y+25, r24	; 0x19
    2646:	9a 8f       	std	Y+26, r25	; 0x1a
    2648:	ab 8f       	std	Y+27, r26	; 0x1b
    264a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264c:	69 8d       	ldd	r22, Y+25	; 0x19
    264e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2650:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2652:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	4a e7       	ldi	r20, 0x7A	; 122
    265a:	55 e4       	ldi	r21, 0x45	; 69
    265c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	8d 8b       	std	Y+21, r24	; 0x15
    2666:	9e 8b       	std	Y+22, r25	; 0x16
    2668:	af 8b       	std	Y+23, r26	; 0x17
    266a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    266c:	6d 89       	ldd	r22, Y+21	; 0x15
    266e:	7e 89       	ldd	r23, Y+22	; 0x16
    2670:	8f 89       	ldd	r24, Y+23	; 0x17
    2672:	98 8d       	ldd	r25, Y+24	; 0x18
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	40 e8       	ldi	r20, 0x80	; 128
    267a:	5f e3       	ldi	r21, 0x3F	; 63
    267c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2680:	88 23       	and	r24, r24
    2682:	2c f4       	brge	.+10     	; 0x268e <LCD_writeChar+0x70c>
		__ticks = 1;
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	9c 8b       	std	Y+20, r25	; 0x14
    268a:	8b 8b       	std	Y+19, r24	; 0x13
    268c:	3f c0       	rjmp	.+126    	; 0x270c <LCD_writeChar+0x78a>
	else if (__tmp > 65535)
    268e:	6d 89       	ldd	r22, Y+21	; 0x15
    2690:	7e 89       	ldd	r23, Y+22	; 0x16
    2692:	8f 89       	ldd	r24, Y+23	; 0x17
    2694:	98 8d       	ldd	r25, Y+24	; 0x18
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	3f ef       	ldi	r19, 0xFF	; 255
    269a:	4f e7       	ldi	r20, 0x7F	; 127
    269c:	57 e4       	ldi	r21, 0x47	; 71
    269e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26a2:	18 16       	cp	r1, r24
    26a4:	4c f5       	brge	.+82     	; 0x26f8 <LCD_writeChar+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a6:	69 8d       	ldd	r22, Y+25	; 0x19
    26a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	40 e2       	ldi	r20, 0x20	; 32
    26b4:	51 e4       	ldi	r21, 0x41	; 65
    26b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	bc 01       	movw	r22, r24
    26c0:	cd 01       	movw	r24, r26
    26c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	9c 8b       	std	Y+20, r25	; 0x14
    26cc:	8b 8b       	std	Y+19, r24	; 0x13
    26ce:	0f c0       	rjmp	.+30     	; 0x26ee <LCD_writeChar+0x76c>
    26d0:	80 e9       	ldi	r24, 0x90	; 144
    26d2:	91 e0       	ldi	r25, 0x01	; 1
    26d4:	9a 8b       	std	Y+18, r25	; 0x12
    26d6:	89 8b       	std	Y+17, r24	; 0x11
    26d8:	89 89       	ldd	r24, Y+17	; 0x11
    26da:	9a 89       	ldd	r25, Y+18	; 0x12
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <LCD_writeChar+0x75a>
    26e0:	9a 8b       	std	Y+18, r25	; 0x12
    26e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e4:	8b 89       	ldd	r24, Y+19	; 0x13
    26e6:	9c 89       	ldd	r25, Y+20	; 0x14
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	9c 8b       	std	Y+20, r25	; 0x14
    26ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ee:	8b 89       	ldd	r24, Y+19	; 0x13
    26f0:	9c 89       	ldd	r25, Y+20	; 0x14
    26f2:	00 97       	sbiw	r24, 0x00	; 0
    26f4:	69 f7       	brne	.-38     	; 0x26d0 <LCD_writeChar+0x74e>
    26f6:	14 c0       	rjmp	.+40     	; 0x2720 <LCD_writeChar+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f8:	6d 89       	ldd	r22, Y+21	; 0x15
    26fa:	7e 89       	ldd	r23, Y+22	; 0x16
    26fc:	8f 89       	ldd	r24, Y+23	; 0x17
    26fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	9c 8b       	std	Y+20, r25	; 0x14
    270a:	8b 8b       	std	Y+19, r24	; 0x13
    270c:	8b 89       	ldd	r24, Y+19	; 0x13
    270e:	9c 89       	ldd	r25, Y+20	; 0x14
    2710:	98 8b       	std	Y+16, r25	; 0x10
    2712:	8f 87       	std	Y+15, r24	; 0x0f
    2714:	8f 85       	ldd	r24, Y+15	; 0x0f
    2716:	98 89       	ldd	r25, Y+16	; 0x10
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <LCD_writeChar+0x796>
    271c:	98 8b       	std	Y+16, r25	; 0x10
    271e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	62 e0       	ldi	r22, 0x02	; 2
    2724:	40 e0       	ldi	r20, 0x00	; 0
    2726:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	a0 e8       	ldi	r26, 0x80	; 128
    2730:	bf e3       	ldi	r27, 0x3F	; 63
    2732:	8b 87       	std	Y+11, r24	; 0x0b
    2734:	9c 87       	std	Y+12, r25	; 0x0c
    2736:	ad 87       	std	Y+13, r26	; 0x0d
    2738:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273a:	6b 85       	ldd	r22, Y+11	; 0x0b
    273c:	7c 85       	ldd	r23, Y+12	; 0x0c
    273e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2740:	9e 85       	ldd	r25, Y+14	; 0x0e
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	4a e7       	ldi	r20, 0x7A	; 122
    2748:	55 e4       	ldi	r21, 0x45	; 69
    274a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	8f 83       	std	Y+7, r24	; 0x07
    2754:	98 87       	std	Y+8, r25	; 0x08
    2756:	a9 87       	std	Y+9, r26	; 0x09
    2758:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    275a:	6f 81       	ldd	r22, Y+7	; 0x07
    275c:	78 85       	ldd	r23, Y+8	; 0x08
    275e:	89 85       	ldd	r24, Y+9	; 0x09
    2760:	9a 85       	ldd	r25, Y+10	; 0x0a
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e8       	ldi	r20, 0x80	; 128
    2768:	5f e3       	ldi	r21, 0x3F	; 63
    276a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    276e:	88 23       	and	r24, r24
    2770:	2c f4       	brge	.+10     	; 0x277c <LCD_writeChar+0x7fa>
		__ticks = 1;
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	9e 83       	std	Y+6, r25	; 0x06
    2778:	8d 83       	std	Y+5, r24	; 0x05
    277a:	3f c0       	rjmp	.+126    	; 0x27fa <LCD_writeChar+0x878>
	else if (__tmp > 65535)
    277c:	6f 81       	ldd	r22, Y+7	; 0x07
    277e:	78 85       	ldd	r23, Y+8	; 0x08
    2780:	89 85       	ldd	r24, Y+9	; 0x09
    2782:	9a 85       	ldd	r25, Y+10	; 0x0a
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	3f ef       	ldi	r19, 0xFF	; 255
    2788:	4f e7       	ldi	r20, 0x7F	; 127
    278a:	57 e4       	ldi	r21, 0x47	; 71
    278c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2790:	18 16       	cp	r1, r24
    2792:	4c f5       	brge	.+82     	; 0x27e6 <LCD_writeChar+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2794:	6b 85       	ldd	r22, Y+11	; 0x0b
    2796:	7c 85       	ldd	r23, Y+12	; 0x0c
    2798:	8d 85       	ldd	r24, Y+13	; 0x0d
    279a:	9e 85       	ldd	r25, Y+14	; 0x0e
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e2       	ldi	r20, 0x20	; 32
    27a2:	51 e4       	ldi	r21, 0x41	; 65
    27a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	bc 01       	movw	r22, r24
    27ae:	cd 01       	movw	r24, r26
    27b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	9e 83       	std	Y+6, r25	; 0x06
    27ba:	8d 83       	std	Y+5, r24	; 0x05
    27bc:	0f c0       	rjmp	.+30     	; 0x27dc <LCD_writeChar+0x85a>
    27be:	80 e9       	ldi	r24, 0x90	; 144
    27c0:	91 e0       	ldi	r25, 0x01	; 1
    27c2:	9c 83       	std	Y+4, r25	; 0x04
    27c4:	8b 83       	std	Y+3, r24	; 0x03
    27c6:	8b 81       	ldd	r24, Y+3	; 0x03
    27c8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	f1 f7       	brne	.-4      	; 0x27ca <LCD_writeChar+0x848>
    27ce:	9c 83       	std	Y+4, r25	; 0x04
    27d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d2:	8d 81       	ldd	r24, Y+5	; 0x05
    27d4:	9e 81       	ldd	r25, Y+6	; 0x06
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	9e 83       	std	Y+6, r25	; 0x06
    27da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27dc:	8d 81       	ldd	r24, Y+5	; 0x05
    27de:	9e 81       	ldd	r25, Y+6	; 0x06
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	69 f7       	brne	.-38     	; 0x27be <LCD_writeChar+0x83c>
    27e4:	14 c0       	rjmp	.+40     	; 0x280e <LCD_writeChar+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e6:	6f 81       	ldd	r22, Y+7	; 0x07
    27e8:	78 85       	ldd	r23, Y+8	; 0x08
    27ea:	89 85       	ldd	r24, Y+9	; 0x09
    27ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	9e 83       	std	Y+6, r25	; 0x06
    27f8:	8d 83       	std	Y+5, r24	; 0x05
    27fa:	8d 81       	ldd	r24, Y+5	; 0x05
    27fc:	9e 81       	ldd	r25, Y+6	; 0x06
    27fe:	9a 83       	std	Y+2, r25	; 0x02
    2800:	89 83       	std	Y+1, r24	; 0x01
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	9a 81       	ldd	r25, Y+2	; 0x02
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	f1 f7       	brne	.-4      	; 0x2806 <LCD_writeChar+0x884>
    280a:	9a 83       	std	Y+2, r25	; 0x02
    280c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT, data);
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
	_delay_ms(1);
#endif
}
    280e:	cd 59       	subi	r28, 0x9D	; 157
    2810:	df 4f       	sbci	r29, 0xFF	; 255
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	f8 94       	cli
    2816:	de bf       	out	0x3e, r29	; 62
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	cd bf       	out	0x3d, r28	; 61
    281c:	cf 91       	pop	r28
    281e:	df 91       	pop	r29
    2820:	1f 91       	pop	r17
    2822:	0f 91       	pop	r16
    2824:	08 95       	ret

00002826 <LCD_writeString>:

void LCD_writeString(const char *str)
{
    2826:	df 93       	push	r29
    2828:	cf 93       	push	r28
    282a:	00 d0       	rcall	.+0      	; 0x282c <LCD_writeString+0x6>
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
    2830:	9a 83       	std	Y+2, r25	; 0x02
    2832:	89 83       	std	Y+1, r24	; 0x01
    2834:	0a c0       	rjmp	.+20     	; 0x284a <LCD_writeString+0x24>
	while (*str != '\0')
	{
		LCD_writeChar(*str);
    2836:	e9 81       	ldd	r30, Y+1	; 0x01
    2838:	fa 81       	ldd	r31, Y+2	; 0x02
    283a:	80 81       	ld	r24, Z
    283c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_writeChar>
		str++;
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	9a 81       	ldd	r25, Y+2	; 0x02
    2844:	01 96       	adiw	r24, 0x01	; 1
    2846:	9a 83       	std	Y+2, r25	; 0x02
    2848:	89 83       	std	Y+1, r24	; 0x01
#endif
}

void LCD_writeString(const char *str)
{
	while (*str != '\0')
    284a:	e9 81       	ldd	r30, Y+1	; 0x01
    284c:	fa 81       	ldd	r31, Y+2	; 0x02
    284e:	80 81       	ld	r24, Z
    2850:	88 23       	and	r24, r24
    2852:	89 f7       	brne	.-30     	; 0x2836 <LCD_writeString+0x10>
	{
		LCD_writeChar(*str);
		str++;
	}
}
    2854:	0f 90       	pop	r0
    2856:	0f 90       	pop	r0
    2858:	cf 91       	pop	r28
    285a:	df 91       	pop	r29
    285c:	08 95       	ret

0000285e <LCD_setCursor>:

void LCD_setCursor(uint8 row, uint8 col)
{
    285e:	df 93       	push	r29
    2860:	cf 93       	push	r28
    2862:	00 d0       	rcall	.+0      	; 0x2864 <LCD_setCursor+0x6>
    2864:	00 d0       	rcall	.+0      	; 0x2866 <LCD_setCursor+0x8>
    2866:	0f 92       	push	r0
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	8a 83       	std	Y+2, r24	; 0x02
    286e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch (row)
    2870:	8a 81       	ldd	r24, Y+2	; 0x02
    2872:	28 2f       	mov	r18, r24
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	3d 83       	std	Y+5, r19	; 0x05
    2878:	2c 83       	std	Y+4, r18	; 0x04
    287a:	8c 81       	ldd	r24, Y+4	; 0x04
    287c:	9d 81       	ldd	r25, Y+5	; 0x05
    287e:	81 30       	cpi	r24, 0x01	; 1
    2880:	91 05       	cpc	r25, r1
    2882:	c1 f0       	breq	.+48     	; 0x28b4 <LCD_setCursor+0x56>
    2884:	2c 81       	ldd	r18, Y+4	; 0x04
    2886:	3d 81       	ldd	r19, Y+5	; 0x05
    2888:	22 30       	cpi	r18, 0x02	; 2
    288a:	31 05       	cpc	r19, r1
    288c:	2c f4       	brge	.+10     	; 0x2898 <LCD_setCursor+0x3a>
    288e:	8c 81       	ldd	r24, Y+4	; 0x04
    2890:	9d 81       	ldd	r25, Y+5	; 0x05
    2892:	00 97       	sbiw	r24, 0x00	; 0
    2894:	61 f0       	breq	.+24     	; 0x28ae <LCD_setCursor+0x50>
    2896:	1a c0       	rjmp	.+52     	; 0x28cc <LCD_setCursor+0x6e>
    2898:	2c 81       	ldd	r18, Y+4	; 0x04
    289a:	3d 81       	ldd	r19, Y+5	; 0x05
    289c:	22 30       	cpi	r18, 0x02	; 2
    289e:	31 05       	cpc	r19, r1
    28a0:	69 f0       	breq	.+26     	; 0x28bc <LCD_setCursor+0x5e>
    28a2:	8c 81       	ldd	r24, Y+4	; 0x04
    28a4:	9d 81       	ldd	r25, Y+5	; 0x05
    28a6:	83 30       	cpi	r24, 0x03	; 3
    28a8:	91 05       	cpc	r25, r1
    28aa:	61 f0       	breq	.+24     	; 0x28c4 <LCD_setCursor+0x66>
    28ac:	0f c0       	rjmp	.+30     	; 0x28cc <LCD_setCursor+0x6e>
	{
	case 0: address = col; break;
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	89 83       	std	Y+1, r24	; 0x01
    28b2:	0d c0       	rjmp	.+26     	; 0x28ce <LCD_setCursor+0x70>
	case 1: address = col + 0x40; break;
    28b4:	8b 81       	ldd	r24, Y+3	; 0x03
    28b6:	80 5c       	subi	r24, 0xC0	; 192
    28b8:	89 83       	std	Y+1, r24	; 0x01
    28ba:	09 c0       	rjmp	.+18     	; 0x28ce <LCD_setCursor+0x70>
	case 2: address = col + 0x10; break;
    28bc:	8b 81       	ldd	r24, Y+3	; 0x03
    28be:	80 5f       	subi	r24, 0xF0	; 240
    28c0:	89 83       	std	Y+1, r24	; 0x01
    28c2:	05 c0       	rjmp	.+10     	; 0x28ce <LCD_setCursor+0x70>
	case 3: address = col + 0x50; break;
    28c4:	8b 81       	ldd	r24, Y+3	; 0x03
    28c6:	80 5b       	subi	r24, 0xB0	; 176
    28c8:	89 83       	std	Y+1, r24	; 0x01
    28ca:	01 c0       	rjmp	.+2      	; 0x28ce <LCD_setCursor+0x70>
	default: address = 0; break;
    28cc:	19 82       	std	Y+1, r1	; 0x01
	}
	LCD_sendCommand(address | LCD_CMD_SET_CURSOR);
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
    28d0:	80 68       	ori	r24, 0x80	; 128
    28d2:	0e 94 6f 0b 	call	0x16de	; 0x16de <LCD_sendCommand>
}
    28d6:	0f 90       	pop	r0
    28d8:	0f 90       	pop	r0
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	cf 91       	pop	r28
    28e2:	df 91       	pop	r29
    28e4:	08 95       	ret

000028e6 <LCD_displayNumber>:

void LCD_displayNumber(uint16 number)
{
    28e6:	df 93       	push	r29
    28e8:	cf 93       	push	r28
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	29 97       	sbiw	r28, 0x09	; 9
    28f0:	0f b6       	in	r0, 0x3f	; 63
    28f2:	f8 94       	cli
    28f4:	de bf       	out	0x3e, r29	; 62
    28f6:	0f be       	out	0x3f, r0	; 63
    28f8:	cd bf       	out	0x3d, r28	; 61
    28fa:	99 87       	std	Y+9, r25	; 0x09
    28fc:	88 87       	std	Y+8, r24	; 0x08
	char buffer[7];
	itoa(number, buffer, 10);
    28fe:	88 85       	ldd	r24, Y+8	; 0x08
    2900:	99 85       	ldd	r25, Y+9	; 0x09
    2902:	9e 01       	movw	r18, r28
    2904:	2f 5f       	subi	r18, 0xFF	; 255
    2906:	3f 4f       	sbci	r19, 0xFF	; 255
    2908:	b9 01       	movw	r22, r18
    290a:	4a e0       	ldi	r20, 0x0A	; 10
    290c:	50 e0       	ldi	r21, 0x00	; 0
    290e:	0e 94 9e 18 	call	0x313c	; 0x313c <itoa>
	LCD_writeString(buffer);
    2912:	ce 01       	movw	r24, r28
    2914:	01 96       	adiw	r24, 0x01	; 1
    2916:	0e 94 13 14 	call	0x2826	; 0x2826 <LCD_writeString>
}
    291a:	29 96       	adiw	r28, 0x09	; 9
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	08 95       	ret

0000292c <LCD_clear>:

void LCD_clear(void)
{
    292c:	df 93       	push	r29
    292e:	cf 93       	push	r28
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CMD_CLEAR_SCREEN);
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	0e 94 6f 0b 	call	0x16de	; 0x16de <LCD_sendCommand>
}
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	08 95       	ret

00002940 <LCD_writeStringAt>:
#include "lcd.h"

void LCD_writeStringAt(uint8 row, uint8 col, const char *str)
{
    2940:	df 93       	push	r29
    2942:	cf 93       	push	r28
    2944:	00 d0       	rcall	.+0      	; 0x2946 <LCD_writeStringAt+0x6>
    2946:	00 d0       	rcall	.+0      	; 0x2948 <LCD_writeStringAt+0x8>
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
    294c:	89 83       	std	Y+1, r24	; 0x01
    294e:	6a 83       	std	Y+2, r22	; 0x02
    2950:	5c 83       	std	Y+4, r21	; 0x04
    2952:	4b 83       	std	Y+3, r20	; 0x03
	LCD_setCursor(row, col);     // Go to (row, col)
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	6a 81       	ldd	r22, Y+2	; 0x02
    2958:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_setCursor>
	LCD_writeString(str);        // Print string from that position
    295c:	8b 81       	ldd	r24, Y+3	; 0x03
    295e:	9c 81       	ldd	r25, Y+4	; 0x04
    2960:	0e 94 13 14 	call	0x2826	; 0x2826 <LCD_writeString>
}
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <LED_initAll>:

#include "led.h"
#include "gpio.h"

void LED_initAll(void)
{
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(LED_PORT_RED, LED_PIN_RED, PIN_OUTPUT);
    297a:	82 e0       	ldi	r24, 0x02	; 2
    297c:	60 e0       	ldi	r22, 0x00	; 0
    297e:	41 e0       	ldi	r20, 0x01	; 1
    2980:	0e 94 78 06 	call	0xcf0	; 0xcf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LED_PORT_GREEN, LED_PIN_GREEN, PIN_OUTPUT);
    2984:	82 e0       	ldi	r24, 0x02	; 2
    2986:	61 e0       	ldi	r22, 0x01	; 1
    2988:	41 e0       	ldi	r20, 0x01	; 1
    298a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LED_PORT_BLUE, LED_PIN_BLUE, PIN_OUTPUT);
    298e:	82 e0       	ldi	r24, 0x02	; 2
    2990:	62 e0       	ldi	r22, 0x02	; 2
    2992:	41 e0       	ldi	r20, 0x01	; 1
    2994:	0e 94 78 06 	call	0xcf0	; 0xcf0 <GPIO_setupPinDirection>

	GPIO_writePin(LED_PORT_RED, LED_PIN_RED, LED_STATE_OFF);
    2998:	82 e0       	ldi	r24, 0x02	; 2
    299a:	60 e0       	ldi	r22, 0x00	; 0
    299c:	40 e0       	ldi	r20, 0x00	; 0
    299e:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LED_PORT_GREEN, LED_PIN_GREEN, LED_STATE_OFF);
    29a2:	82 e0       	ldi	r24, 0x02	; 2
    29a4:	61 e0       	ldi	r22, 0x01	; 1
    29a6:	40 e0       	ldi	r20, 0x00	; 0
    29a8:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LED_PORT_BLUE, LED_PIN_BLUE, LED_STATE_OFF);
    29ac:	82 e0       	ldi	r24, 0x02	; 2
    29ae:	62 e0       	ldi	r22, 0x02	; 2
    29b0:	40 e0       	ldi	r20, 0x00	; 0
    29b2:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
}
    29b6:	cf 91       	pop	r28
    29b8:	df 91       	pop	r29
    29ba:	08 95       	ret

000029bc <LED_turnOn>:

void LED_turnOn(LED_Color color)
{
    29bc:	df 93       	push	r29
    29be:	cf 93       	push	r28
    29c0:	00 d0       	rcall	.+0      	; 0x29c2 <LED_turnOn+0x6>
    29c2:	0f 92       	push	r0
    29c4:	cd b7       	in	r28, 0x3d	; 61
    29c6:	de b7       	in	r29, 0x3e	; 62
    29c8:	89 83       	std	Y+1, r24	; 0x01
	switch(color)
    29ca:	89 81       	ldd	r24, Y+1	; 0x01
    29cc:	28 2f       	mov	r18, r24
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	3b 83       	std	Y+3, r19	; 0x03
    29d2:	2a 83       	std	Y+2, r18	; 0x02
    29d4:	8a 81       	ldd	r24, Y+2	; 0x02
    29d6:	9b 81       	ldd	r25, Y+3	; 0x03
    29d8:	81 30       	cpi	r24, 0x01	; 1
    29da:	91 05       	cpc	r25, r1
    29dc:	79 f0       	breq	.+30     	; 0x29fc <LED_turnOn+0x40>
    29de:	2a 81       	ldd	r18, Y+2	; 0x02
    29e0:	3b 81       	ldd	r19, Y+3	; 0x03
    29e2:	22 30       	cpi	r18, 0x02	; 2
    29e4:	31 05       	cpc	r19, r1
    29e6:	81 f0       	breq	.+32     	; 0x2a08 <LED_turnOn+0x4c>
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	9b 81       	ldd	r25, Y+3	; 0x03
    29ec:	00 97       	sbiw	r24, 0x00	; 0
    29ee:	89 f4       	brne	.+34     	; 0x2a12 <LED_turnOn+0x56>
	{
	case LED_COLOR_RED:
		GPIO_writePin(LED_PORT_RED, LED_PIN_RED, LED_STATE_ON);
    29f0:	82 e0       	ldi	r24, 0x02	; 2
    29f2:	60 e0       	ldi	r22, 0x00	; 0
    29f4:	41 e0       	ldi	r20, 0x01	; 1
    29f6:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    29fa:	0b c0       	rjmp	.+22     	; 0x2a12 <LED_turnOn+0x56>
		break;
	case LED_COLOR_GREEN:
		GPIO_writePin(LED_PORT_GREEN, LED_PIN_GREEN, LED_STATE_ON);
    29fc:	82 e0       	ldi	r24, 0x02	; 2
    29fe:	61 e0       	ldi	r22, 0x01	; 1
    2a00:	41 e0       	ldi	r20, 0x01	; 1
    2a02:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    2a06:	05 c0       	rjmp	.+10     	; 0x2a12 <LED_turnOn+0x56>
		break;
	case LED_COLOR_BLUE:
		GPIO_writePin(LED_PORT_BLUE, LED_PIN_BLUE, LED_STATE_ON);
    2a08:	82 e0       	ldi	r24, 0x02	; 2
    2a0a:	62 e0       	ldi	r22, 0x02	; 2
    2a0c:	41 e0       	ldi	r20, 0x01	; 1
    2a0e:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
		break;
	}
}
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	cf 91       	pop	r28
    2a1a:	df 91       	pop	r29
    2a1c:	08 95       	ret

00002a1e <LED_turnOff>:

void LED_turnOff(LED_Color color)
{
    2a1e:	df 93       	push	r29
    2a20:	cf 93       	push	r28
    2a22:	00 d0       	rcall	.+0      	; 0x2a24 <LED_turnOff+0x6>
    2a24:	0f 92       	push	r0
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62
    2a2a:	89 83       	std	Y+1, r24	; 0x01
	switch(color)
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	28 2f       	mov	r18, r24
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	3b 83       	std	Y+3, r19	; 0x03
    2a34:	2a 83       	std	Y+2, r18	; 0x02
    2a36:	8a 81       	ldd	r24, Y+2	; 0x02
    2a38:	9b 81       	ldd	r25, Y+3	; 0x03
    2a3a:	81 30       	cpi	r24, 0x01	; 1
    2a3c:	91 05       	cpc	r25, r1
    2a3e:	79 f0       	breq	.+30     	; 0x2a5e <LED_turnOff+0x40>
    2a40:	2a 81       	ldd	r18, Y+2	; 0x02
    2a42:	3b 81       	ldd	r19, Y+3	; 0x03
    2a44:	22 30       	cpi	r18, 0x02	; 2
    2a46:	31 05       	cpc	r19, r1
    2a48:	81 f0       	breq	.+32     	; 0x2a6a <LED_turnOff+0x4c>
    2a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4e:	00 97       	sbiw	r24, 0x00	; 0
    2a50:	89 f4       	brne	.+34     	; 0x2a74 <LED_turnOff+0x56>
	{
	case LED_COLOR_RED:
		GPIO_writePin(LED_PORT_RED, LED_PIN_RED, LED_STATE_OFF);
    2a52:	82 e0       	ldi	r24, 0x02	; 2
    2a54:	60 e0       	ldi	r22, 0x00	; 0
    2a56:	40 e0       	ldi	r20, 0x00	; 0
    2a58:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    2a5c:	0b c0       	rjmp	.+22     	; 0x2a74 <LED_turnOff+0x56>
		break;
	case LED_COLOR_GREEN:
		GPIO_writePin(LED_PORT_GREEN, LED_PIN_GREEN, LED_STATE_OFF);
    2a5e:	82 e0       	ldi	r24, 0x02	; 2
    2a60:	61 e0       	ldi	r22, 0x01	; 1
    2a62:	40 e0       	ldi	r20, 0x00	; 0
    2a64:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    2a68:	05 c0       	rjmp	.+10     	; 0x2a74 <LED_turnOff+0x56>
		break;
	case LED_COLOR_BLUE:
		GPIO_writePin(LED_PORT_BLUE, LED_PIN_BLUE, LED_STATE_OFF);
    2a6a:	82 e0       	ldi	r24, 0x02	; 2
    2a6c:	62 e0       	ldi	r22, 0x02	; 2
    2a6e:	40 e0       	ldi	r20, 0x00	; 0
    2a70:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
		break;
	}
}
    2a74:	0f 90       	pop	r0
    2a76:	0f 90       	pop	r0
    2a78:	0f 90       	pop	r0
    2a7a:	cf 91       	pop	r28
    2a7c:	df 91       	pop	r29
    2a7e:	08 95       	ret

00002a80 <main>:
#include <util/delay.h>
#include <avr/io.h>
#include "interrupt.h"

int main(void)
{
    2a80:	df 93       	push	r29
    2a82:	cf 93       	push	r28
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
    2a88:	a0 97       	sbiw	r28, 0x20	; 32
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
	uint16 distance = 0;
    2a94:	18 a2       	std	Y+32, r1	; 0x20
    2a96:	1f 8e       	std	Y+31, r1	; 0x1f
	uint16 lastDistance = 0xFFFF; // Large initial value to ensure LCD updates first time
    2a98:	8f ef       	ldi	r24, 0xFF	; 255
    2a9a:	9f ef       	ldi	r25, 0xFF	; 255
    2a9c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a9e:	8d 8f       	std	Y+29, r24	; 0x1d

	LCD_initialize();
    2aa0:	0e 94 bd 0a 	call	0x157a	; 0x157a <LCD_initialize>
	LED_initAll();
    2aa4:	0e 94 b9 14 	call	0x2972	; 0x2972 <LED_initAll>
	Buzzer_init();
    2aa8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Buzzer_init>
	Ultrasonic_init();  // ✅ Corrected name to match ultrasonic.c
    2aac:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <Ultrasonic_init>

	LCD_writeStringAt(0, 0, "Distance =     cm");
    2ab0:	20 e6       	ldi	r18, 0x60	; 96
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	60 e0       	ldi	r22, 0x00	; 0
    2ab8:	a9 01       	movw	r20, r18
    2aba:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_writeStringAt>

	Enable_Global_Interrupt();
    2abe:	af e5       	ldi	r26, 0x5F	; 95
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	ef e5       	ldi	r30, 0x5F	; 95
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	80 68       	ori	r24, 0x80	; 128
    2aca:	8c 93       	st	X, r24

	while (1)
	{
		distance = Ultrasonic_readDistance();  // ✅ Matches the ultrasonic driver name
    2acc:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <Ultrasonic_readDistance>
    2ad0:	98 a3       	std	Y+32, r25	; 0x20
    2ad2:	8f 8f       	std	Y+31, r24	; 0x1f

		/* Only update LCD if the distance changed significantly */
		if ((lastDistance == 0xFFFF) || ((distance > lastDistance) ? (distance - lastDistance) : (lastDistance - distance)) >= 2)
    2ad4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ad6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ad8:	2f ef       	ldi	r18, 0xFF	; 255
    2ada:	8f 3f       	cpi	r24, 0xFF	; 255
    2adc:	92 07       	cpc	r25, r18
    2ade:	d1 f0       	breq	.+52     	; 0x2b14 <main+0x94>
    2ae0:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2ae2:	38 a1       	ldd	r19, Y+32	; 0x20
    2ae4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ae6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ae8:	82 17       	cp	r24, r18
    2aea:	93 07       	cpc	r25, r19
    2aec:	50 f4       	brcc	.+20     	; 0x2b02 <main+0x82>
    2aee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2af0:	98 a1       	ldd	r25, Y+32	; 0x20
    2af2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2af4:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2af6:	82 1b       	sub	r24, r18
    2af8:	93 0b       	sbc	r25, r19
    2afa:	82 30       	cpi	r24, 0x02	; 2
    2afc:	91 05       	cpc	r25, r1
    2afe:	50 f4       	brcc	.+20     	; 0x2b14 <main+0x94>
    2b00:	1d c0       	rjmp	.+58     	; 0x2b3c <main+0xbc>
    2b02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b04:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b06:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2b08:	38 a1       	ldd	r19, Y+32	; 0x20
    2b0a:	82 1b       	sub	r24, r18
    2b0c:	93 0b       	sbc	r25, r19
    2b0e:	82 30       	cpi	r24, 0x02	; 2
    2b10:	91 05       	cpc	r25, r1
    2b12:	a0 f0       	brcs	.+40     	; 0x2b3c <main+0xbc>
		{
			LCD_setCursor(0, 10);
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    2b16:	6a e0       	ldi	r22, 0x0A	; 10
    2b18:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_setCursor>
			LCD_writeString("    ");  // Clear old value
    2b1c:	82 e7       	ldi	r24, 0x72	; 114
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	0e 94 13 14 	call	0x2826	; 0x2826 <LCD_writeString>
			LCD_setCursor(0, 10);
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	6a e0       	ldi	r22, 0x0A	; 10
    2b28:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_setCursor>
			LCD_displayNumber(distance);
    2b2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b2e:	98 a1       	ldd	r25, Y+32	; 0x20
    2b30:	0e 94 73 14 	call	0x28e6	; 0x28e6 <LCD_displayNumber>
			lastDistance = distance;
    2b34:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b36:	98 a1       	ldd	r25, Y+32	; 0x20
    2b38:	9e 8f       	std	Y+30, r25	; 0x1e
    2b3a:	8d 8f       	std	Y+29, r24	; 0x1d
		}

		/* Visual + Audio alerts based on distance */
		if (distance <= 5)
    2b3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b3e:	98 a1       	ldd	r25, Y+32	; 0x20
    2b40:	86 30       	cpi	r24, 0x06	; 6
    2b42:	91 05       	cpc	r25, r1
    2b44:	08 f0       	brcs	.+2      	; 0x2b48 <main+0xc8>
    2b46:	8e c0       	rjmp	.+284    	; 0x2c64 <main+0x1e4>
		{
			Buzzer_on();
    2b48:	0e 94 60 06 	call	0xcc0	; 0xcc0 <Buzzer_on>
			LCD_writeStringAt(1, 6, "STOP");
    2b4c:	27 e7       	ldi	r18, 0x77	; 119
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	66 e0       	ldi	r22, 0x06	; 6
    2b54:	a9 01       	movw	r20, r18
    2b56:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_writeStringAt>
			LED_turnOn(LED_COLOR_RED);
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	0e 94 de 14 	call	0x29bc	; 0x29bc <LED_turnOn>
			LED_turnOn(LED_COLOR_GREEN);
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	0e 94 de 14 	call	0x29bc	; 0x29bc <LED_turnOn>
			LED_turnOn(LED_COLOR_BLUE);
    2b66:	82 e0       	ldi	r24, 0x02	; 2
    2b68:	0e 94 de 14 	call	0x29bc	; 0x29bc <LED_turnOn>
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	a6 e9       	ldi	r26, 0x96	; 150
    2b72:	b3 e4       	ldi	r27, 0x43	; 67
    2b74:	89 8f       	std	Y+25, r24	; 0x19
    2b76:	9a 8f       	std	Y+26, r25	; 0x1a
    2b78:	ab 8f       	std	Y+27, r26	; 0x1b
    2b7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b7c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	4a e7       	ldi	r20, 0x7A	; 122
    2b8a:	55 e4       	ldi	r21, 0x45	; 69
    2b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	8d 8b       	std	Y+21, r24	; 0x15
    2b96:	9e 8b       	std	Y+22, r25	; 0x16
    2b98:	af 8b       	std	Y+23, r26	; 0x17
    2b9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2ba0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	40 e8       	ldi	r20, 0x80	; 128
    2baa:	5f e3       	ldi	r21, 0x3F	; 63
    2bac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bb0:	88 23       	and	r24, r24
    2bb2:	2c f4       	brge	.+10     	; 0x2bbe <main+0x13e>
		__ticks = 1;
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	9c 8b       	std	Y+20, r25	; 0x14
    2bba:	8b 8b       	std	Y+19, r24	; 0x13
    2bbc:	3f c0       	rjmp	.+126    	; 0x2c3c <main+0x1bc>
	else if (__tmp > 65535)
    2bbe:	6d 89       	ldd	r22, Y+21	; 0x15
    2bc0:	7e 89       	ldd	r23, Y+22	; 0x16
    2bc2:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc4:	98 8d       	ldd	r25, Y+24	; 0x18
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	3f ef       	ldi	r19, 0xFF	; 255
    2bca:	4f e7       	ldi	r20, 0x7F	; 127
    2bcc:	57 e4       	ldi	r21, 0x47	; 71
    2bce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bd2:	18 16       	cp	r1, r24
    2bd4:	4c f5       	brge	.+82     	; 0x2c28 <main+0x1a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd6:	69 8d       	ldd	r22, Y+25	; 0x19
    2bd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	40 e2       	ldi	r20, 0x20	; 32
    2be4:	51 e4       	ldi	r21, 0x41	; 65
    2be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	bc 01       	movw	r22, r24
    2bf0:	cd 01       	movw	r24, r26
    2bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	9c 8b       	std	Y+20, r25	; 0x14
    2bfc:	8b 8b       	std	Y+19, r24	; 0x13
    2bfe:	0f c0       	rjmp	.+30     	; 0x2c1e <main+0x19e>
    2c00:	80 e9       	ldi	r24, 0x90	; 144
    2c02:	91 e0       	ldi	r25, 0x01	; 1
    2c04:	9a 8b       	std	Y+18, r25	; 0x12
    2c06:	89 8b       	std	Y+17, r24	; 0x11
    2c08:	89 89       	ldd	r24, Y+17	; 0x11
    2c0a:	9a 89       	ldd	r25, Y+18	; 0x12
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	f1 f7       	brne	.-4      	; 0x2c0c <main+0x18c>
    2c10:	9a 8b       	std	Y+18, r25	; 0x12
    2c12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c14:	8b 89       	ldd	r24, Y+19	; 0x13
    2c16:	9c 89       	ldd	r25, Y+20	; 0x14
    2c18:	01 97       	sbiw	r24, 0x01	; 1
    2c1a:	9c 8b       	std	Y+20, r25	; 0x14
    2c1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c20:	9c 89       	ldd	r25, Y+20	; 0x14
    2c22:	00 97       	sbiw	r24, 0x00	; 0
    2c24:	69 f7       	brne	.-38     	; 0x2c00 <main+0x180>
    2c26:	14 c0       	rjmp	.+40     	; 0x2c50 <main+0x1d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c28:	6d 89       	ldd	r22, Y+21	; 0x15
    2c2a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	9c 8b       	std	Y+20, r25	; 0x14
    2c3a:	8b 8b       	std	Y+19, r24	; 0x13
    2c3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c40:	98 8b       	std	Y+16, r25	; 0x10
    2c42:	8f 87       	std	Y+15, r24	; 0x0f
    2c44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c46:	98 89       	ldd	r25, Y+16	; 0x10
    2c48:	01 97       	sbiw	r24, 0x01	; 1
    2c4a:	f1 f7       	brne	.-4      	; 0x2c48 <main+0x1c8>
    2c4c:	98 8b       	std	Y+16, r25	; 0x10
    2c4e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(300);
			LED_turnOff(LED_COLOR_RED);
    2c50:	80 e0       	ldi	r24, 0x00	; 0
    2c52:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <LED_turnOff>
			LED_turnOff(LED_COLOR_GREEN);
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <LED_turnOff>
			LED_turnOff(LED_COLOR_BLUE);
    2c5c:	82 e0       	ldi	r24, 0x02	; 2
    2c5e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <LED_turnOff>
    2c62:	5a c0       	rjmp	.+180    	; 0x2d18 <main+0x298>
		}
		else if (distance <= 10)
    2c64:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c66:	98 a1       	ldd	r25, Y+32	; 0x20
    2c68:	8b 30       	cpi	r24, 0x0B	; 11
    2c6a:	91 05       	cpc	r25, r1
    2c6c:	98 f4       	brcc	.+38     	; 0x2c94 <main+0x214>
		{
			Buzzer_off();
    2c6e:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <Buzzer_off>
			LCD_writeStringAt(1, 6, "    "); // Clear previous message
    2c72:	22 e7       	ldi	r18, 0x72	; 114
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	66 e0       	ldi	r22, 0x06	; 6
    2c7a:	a9 01       	movw	r20, r18
    2c7c:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_writeStringAt>
			LED_turnOn(LED_COLOR_RED);
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	0e 94 de 14 	call	0x29bc	; 0x29bc <LED_turnOn>
			LED_turnOn(LED_COLOR_GREEN);
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	0e 94 de 14 	call	0x29bc	; 0x29bc <LED_turnOn>
			LED_turnOn(LED_COLOR_BLUE);
    2c8c:	82 e0       	ldi	r24, 0x02	; 2
    2c8e:	0e 94 de 14 	call	0x29bc	; 0x29bc <LED_turnOn>
    2c92:	42 c0       	rjmp	.+132    	; 0x2d18 <main+0x298>
		}
		else if (distance <= 15)
    2c94:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c96:	98 a1       	ldd	r25, Y+32	; 0x20
    2c98:	80 31       	cpi	r24, 0x10	; 16
    2c9a:	91 05       	cpc	r25, r1
    2c9c:	98 f4       	brcc	.+38     	; 0x2cc4 <main+0x244>
		{
			Buzzer_off();
    2c9e:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <Buzzer_off>
			LCD_writeStringAt(1, 6, "    ");
    2ca2:	22 e7       	ldi	r18, 0x72	; 114
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	66 e0       	ldi	r22, 0x06	; 6
    2caa:	a9 01       	movw	r20, r18
    2cac:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_writeStringAt>
			LED_turnOn(LED_COLOR_RED);
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	0e 94 de 14 	call	0x29bc	; 0x29bc <LED_turnOn>
			LED_turnOn(LED_COLOR_GREEN);
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	0e 94 de 14 	call	0x29bc	; 0x29bc <LED_turnOn>
			LED_turnOff(LED_COLOR_BLUE);
    2cbc:	82 e0       	ldi	r24, 0x02	; 2
    2cbe:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <LED_turnOff>
    2cc2:	2a c0       	rjmp	.+84     	; 0x2d18 <main+0x298>
		}
		else if (distance <= 20)
    2cc4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cc6:	98 a1       	ldd	r25, Y+32	; 0x20
    2cc8:	85 31       	cpi	r24, 0x15	; 21
    2cca:	91 05       	cpc	r25, r1
    2ccc:	98 f4       	brcc	.+38     	; 0x2cf4 <main+0x274>
		{
			Buzzer_off();
    2cce:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <Buzzer_off>
			LCD_writeStringAt(1, 6, "    ");
    2cd2:	22 e7       	ldi	r18, 0x72	; 114
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	66 e0       	ldi	r22, 0x06	; 6
    2cda:	a9 01       	movw	r20, r18
    2cdc:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_writeStringAt>
			LED_turnOn(LED_COLOR_RED);
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	0e 94 de 14 	call	0x29bc	; 0x29bc <LED_turnOn>
			LED_turnOff(LED_COLOR_GREEN);
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <LED_turnOff>
			LED_turnOff(LED_COLOR_BLUE);
    2cec:	82 e0       	ldi	r24, 0x02	; 2
    2cee:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <LED_turnOff>
    2cf2:	12 c0       	rjmp	.+36     	; 0x2d18 <main+0x298>
		}
		else
		{
			Buzzer_off();
    2cf4:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <Buzzer_off>
			LCD_writeStringAt(1, 6, "    ");
    2cf8:	22 e7       	ldi	r18, 0x72	; 114
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	66 e0       	ldi	r22, 0x06	; 6
    2d00:	a9 01       	movw	r20, r18
    2d02:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_writeStringAt>
			LED_turnOff(LED_COLOR_RED);
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <LED_turnOff>
			LED_turnOff(LED_COLOR_GREEN);
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <LED_turnOff>
			LED_turnOff(LED_COLOR_BLUE);
    2d12:	82 e0       	ldi	r24, 0x02	; 2
    2d14:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <LED_turnOff>
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	a8 ec       	ldi	r26, 0xC8	; 200
    2d1e:	b2 e4       	ldi	r27, 0x42	; 66
    2d20:	8b 87       	std	Y+11, r24	; 0x0b
    2d22:	9c 87       	std	Y+12, r25	; 0x0c
    2d24:	ad 87       	std	Y+13, r26	; 0x0d
    2d26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	4a e7       	ldi	r20, 0x7A	; 122
    2d36:	55 e4       	ldi	r21, 0x45	; 69
    2d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	8f 83       	std	Y+7, r24	; 0x07
    2d42:	98 87       	std	Y+8, r25	; 0x08
    2d44:	a9 87       	std	Y+9, r26	; 0x09
    2d46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d48:	6f 81       	ldd	r22, Y+7	; 0x07
    2d4a:	78 85       	ldd	r23, Y+8	; 0x08
    2d4c:	89 85       	ldd	r24, Y+9	; 0x09
    2d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	40 e8       	ldi	r20, 0x80	; 128
    2d56:	5f e3       	ldi	r21, 0x3F	; 63
    2d58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d5c:	88 23       	and	r24, r24
    2d5e:	2c f4       	brge	.+10     	; 0x2d6a <main+0x2ea>
		__ticks = 1;
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	9e 83       	std	Y+6, r25	; 0x06
    2d66:	8d 83       	std	Y+5, r24	; 0x05
    2d68:	3f c0       	rjmp	.+126    	; 0x2de8 <main+0x368>
	else if (__tmp > 65535)
    2d6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d6c:	78 85       	ldd	r23, Y+8	; 0x08
    2d6e:	89 85       	ldd	r24, Y+9	; 0x09
    2d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	3f ef       	ldi	r19, 0xFF	; 255
    2d76:	4f e7       	ldi	r20, 0x7F	; 127
    2d78:	57 e4       	ldi	r21, 0x47	; 71
    2d7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d7e:	18 16       	cp	r1, r24
    2d80:	4c f5       	brge	.+82     	; 0x2dd4 <main+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	40 e2       	ldi	r20, 0x20	; 32
    2d90:	51 e4       	ldi	r21, 0x41	; 65
    2d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	bc 01       	movw	r22, r24
    2d9c:	cd 01       	movw	r24, r26
    2d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da2:	dc 01       	movw	r26, r24
    2da4:	cb 01       	movw	r24, r22
    2da6:	9e 83       	std	Y+6, r25	; 0x06
    2da8:	8d 83       	std	Y+5, r24	; 0x05
    2daa:	0f c0       	rjmp	.+30     	; 0x2dca <main+0x34a>
    2dac:	80 e9       	ldi	r24, 0x90	; 144
    2dae:	91 e0       	ldi	r25, 0x01	; 1
    2db0:	9c 83       	std	Y+4, r25	; 0x04
    2db2:	8b 83       	std	Y+3, r24	; 0x03
    2db4:	8b 81       	ldd	r24, Y+3	; 0x03
    2db6:	9c 81       	ldd	r25, Y+4	; 0x04
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <main+0x338>
    2dbc:	9c 83       	std	Y+4, r25	; 0x04
    2dbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc4:	01 97       	sbiw	r24, 0x01	; 1
    2dc6:	9e 83       	std	Y+6, r25	; 0x06
    2dc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dca:	8d 81       	ldd	r24, Y+5	; 0x05
    2dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dce:	00 97       	sbiw	r24, 0x00	; 0
    2dd0:	69 f7       	brne	.-38     	; 0x2dac <main+0x32c>
    2dd2:	7c ce       	rjmp	.-776    	; 0x2acc <main+0x4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd6:	78 85       	ldd	r23, Y+8	; 0x08
    2dd8:	89 85       	ldd	r24, Y+9	; 0x09
    2dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	9e 83       	std	Y+6, r25	; 0x06
    2de6:	8d 83       	std	Y+5, r24	; 0x05
    2de8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dea:	9e 81       	ldd	r25, Y+6	; 0x06
    2dec:	9a 83       	std	Y+2, r25	; 0x02
    2dee:	89 83       	std	Y+1, r24	; 0x01
    2df0:	89 81       	ldd	r24, Y+1	; 0x01
    2df2:	9a 81       	ldd	r25, Y+2	; 0x02
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	f1 f7       	brne	.-4      	; 0x2df4 <main+0x374>
    2df8:	9a 83       	std	Y+2, r25	; 0x02
    2dfa:	89 83       	std	Y+1, r24	; 0x01
    2dfc:	67 ce       	rjmp	.-818    	; 0x2acc <main+0x4c>

00002dfe <Ultrasonic_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Ultrasonic_init(void)
{
    2dfe:	df 93       	push	r29
    2e00:	cf 93       	push	r28
    2e02:	00 d0       	rcall	.+0      	; 0x2e04 <Ultrasonic_init+0x6>
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
	ICU_ConfigType config = {F_CPU_8, RAISING};
    2e08:	82 e0       	ldi	r24, 0x02	; 2
    2e0a:	89 83       	std	Y+1, r24	; 0x01
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	8a 83       	std	Y+2, r24	; 0x02
	ICU_init(&config);
    2e10:	ce 01       	movw	r24, r28
    2e12:	01 96       	adiw	r24, 0x01	; 1
    2e14:	0e 94 0d 0a 	call	0x141a	; 0x141a <ICU_init>

	ICU_setCallBack(Ultrasonic_edgeProcessing);
    2e18:	89 e2       	ldi	r24, 0x29	; 41
    2e1a:	98 e1       	ldi	r25, 0x18	; 24
    2e1c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <ICU_setCallBack>

	GPIO_setupPinDirection(ULTRASONIC_TRIGGER_PORT_ID, ULTRASONIC_TRIGGER_PIN_ID, PIN_OUTPUT);
    2e20:	83 e0       	ldi	r24, 0x03	; 3
    2e22:	67 e0       	ldi	r22, 0x07	; 7
    2e24:	41 e0       	ldi	r20, 0x01	; 1
    2e26:	0e 94 78 06 	call	0xcf0	; 0xcf0 <GPIO_setupPinDirection>
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID, ULTRASONIC_TRIGGER_PIN_ID, LOGIC_LOW); // ensure trigger low at start
    2e2a:	83 e0       	ldi	r24, 0x03	; 3
    2e2c:	67 e0       	ldi	r22, 0x07	; 7
    2e2e:	40 e0       	ldi	r20, 0x00	; 0
    2e30:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
}
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	cf 91       	pop	r28
    2e3a:	df 91       	pop	r29
    2e3c:	08 95       	ret

00002e3e <Ultrasonic_trigger>:

void Ultrasonic_trigger(void)
{
    2e3e:	df 93       	push	r29
    2e40:	cf 93       	push	r28
    2e42:	cd b7       	in	r28, 0x3d	; 61
    2e44:	de b7       	in	r29, 0x3e	; 62
    2e46:	68 97       	sbiw	r28, 0x18	; 24
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	f8 94       	cli
    2e4c:	de bf       	out	0x3e, r29	; 62
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID, ULTRASONIC_TRIGGER_PIN_ID, LOGIC_HIGH);
    2e52:	83 e0       	ldi	r24, 0x03	; 3
    2e54:	67 e0       	ldi	r22, 0x07	; 7
    2e56:	41 e0       	ldi	r20, 0x01	; 1
    2e58:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    2e5c:	80 e0       	ldi	r24, 0x00	; 0
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	a0 e2       	ldi	r26, 0x20	; 32
    2e62:	b1 e4       	ldi	r27, 0x41	; 65
    2e64:	8d 8b       	std	Y+21, r24	; 0x15
    2e66:	9e 8b       	std	Y+22, r25	; 0x16
    2e68:	af 8b       	std	Y+23, r26	; 0x17
    2e6a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e6c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e6e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e70:	8f 89       	ldd	r24, Y+23	; 0x17
    2e72:	98 8d       	ldd	r25, Y+24	; 0x18
    2e74:	2b ea       	ldi	r18, 0xAB	; 171
    2e76:	3a ea       	ldi	r19, 0xAA	; 170
    2e78:	4a ea       	ldi	r20, 0xAA	; 170
    2e7a:	50 e4       	ldi	r21, 0x40	; 64
    2e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	89 8b       	std	Y+17, r24	; 0x11
    2e86:	9a 8b       	std	Y+18, r25	; 0x12
    2e88:	ab 8b       	std	Y+19, r26	; 0x13
    2e8a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2e8c:	69 89       	ldd	r22, Y+17	; 0x11
    2e8e:	7a 89       	ldd	r23, Y+18	; 0x12
    2e90:	8b 89       	ldd	r24, Y+19	; 0x13
    2e92:	9c 89       	ldd	r25, Y+20	; 0x14
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	40 e8       	ldi	r20, 0x80	; 128
    2e9a:	5f e3       	ldi	r21, 0x3F	; 63
    2e9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ea0:	88 23       	and	r24, r24
    2ea2:	1c f4       	brge	.+6      	; 0x2eaa <Ultrasonic_trigger+0x6c>
		__ticks = 1;
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	88 8b       	std	Y+16, r24	; 0x10
    2ea8:	91 c0       	rjmp	.+290    	; 0x2fcc <Ultrasonic_trigger+0x18e>
	else if (__tmp > 255)
    2eaa:	69 89       	ldd	r22, Y+17	; 0x11
    2eac:	7a 89       	ldd	r23, Y+18	; 0x12
    2eae:	8b 89       	ldd	r24, Y+19	; 0x13
    2eb0:	9c 89       	ldd	r25, Y+20	; 0x14
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	4f e7       	ldi	r20, 0x7F	; 127
    2eb8:	53 e4       	ldi	r21, 0x43	; 67
    2eba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ebe:	18 16       	cp	r1, r24
    2ec0:	0c f0       	brlt	.+2      	; 0x2ec4 <Ultrasonic_trigger+0x86>
    2ec2:	7b c0       	rjmp	.+246    	; 0x2fba <Ultrasonic_trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2ec4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ec6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ec8:	8f 89       	ldd	r24, Y+23	; 0x17
    2eca:	98 8d       	ldd	r25, Y+24	; 0x18
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	4a e7       	ldi	r20, 0x7A	; 122
    2ed2:	54 e4       	ldi	r21, 0x44	; 68
    2ed4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	8c 87       	std	Y+12, r24	; 0x0c
    2ede:	9d 87       	std	Y+13, r25	; 0x0d
    2ee0:	ae 87       	std	Y+14, r26	; 0x0e
    2ee2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee4:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ee6:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ee8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2eea:	9f 85       	ldd	r25, Y+15	; 0x0f
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	4a e7       	ldi	r20, 0x7A	; 122
    2ef2:	55 e4       	ldi	r21, 0x45	; 69
    2ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	88 87       	std	Y+8, r24	; 0x08
    2efe:	99 87       	std	Y+9, r25	; 0x09
    2f00:	aa 87       	std	Y+10, r26	; 0x0a
    2f02:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2f04:	68 85       	ldd	r22, Y+8	; 0x08
    2f06:	79 85       	ldd	r23, Y+9	; 0x09
    2f08:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f0a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	40 e8       	ldi	r20, 0x80	; 128
    2f12:	5f e3       	ldi	r21, 0x3F	; 63
    2f14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f18:	88 23       	and	r24, r24
    2f1a:	2c f4       	brge	.+10     	; 0x2f26 <Ultrasonic_trigger+0xe8>
		__ticks = 1;
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	9f 83       	std	Y+7, r25	; 0x07
    2f22:	8e 83       	std	Y+6, r24	; 0x06
    2f24:	3f c0       	rjmp	.+126    	; 0x2fa4 <Ultrasonic_trigger+0x166>
	else if (__tmp > 65535)
    2f26:	68 85       	ldd	r22, Y+8	; 0x08
    2f28:	79 85       	ldd	r23, Y+9	; 0x09
    2f2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	3f ef       	ldi	r19, 0xFF	; 255
    2f32:	4f e7       	ldi	r20, 0x7F	; 127
    2f34:	57 e4       	ldi	r21, 0x47	; 71
    2f36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f3a:	18 16       	cp	r1, r24
    2f3c:	4c f5       	brge	.+82     	; 0x2f90 <Ultrasonic_trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f3e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f40:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f42:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f44:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	40 e2       	ldi	r20, 0x20	; 32
    2f4c:	51 e4       	ldi	r21, 0x41	; 65
    2f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	bc 01       	movw	r22, r24
    2f58:	cd 01       	movw	r24, r26
    2f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	9f 83       	std	Y+7, r25	; 0x07
    2f64:	8e 83       	std	Y+6, r24	; 0x06
    2f66:	0f c0       	rjmp	.+30     	; 0x2f86 <Ultrasonic_trigger+0x148>
    2f68:	80 e9       	ldi	r24, 0x90	; 144
    2f6a:	91 e0       	ldi	r25, 0x01	; 1
    2f6c:	9d 83       	std	Y+5, r25	; 0x05
    2f6e:	8c 83       	std	Y+4, r24	; 0x04
    2f70:	8c 81       	ldd	r24, Y+4	; 0x04
    2f72:	9d 81       	ldd	r25, Y+5	; 0x05
    2f74:	01 97       	sbiw	r24, 0x01	; 1
    2f76:	f1 f7       	brne	.-4      	; 0x2f74 <Ultrasonic_trigger+0x136>
    2f78:	9d 83       	std	Y+5, r25	; 0x05
    2f7a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f7c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f7e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f80:	01 97       	sbiw	r24, 0x01	; 1
    2f82:	9f 83       	std	Y+7, r25	; 0x07
    2f84:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f86:	8e 81       	ldd	r24, Y+6	; 0x06
    2f88:	9f 81       	ldd	r25, Y+7	; 0x07
    2f8a:	00 97       	sbiw	r24, 0x00	; 0
    2f8c:	69 f7       	brne	.-38     	; 0x2f68 <Ultrasonic_trigger+0x12a>
    2f8e:	24 c0       	rjmp	.+72     	; 0x2fd8 <Ultrasonic_trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f90:	68 85       	ldd	r22, Y+8	; 0x08
    2f92:	79 85       	ldd	r23, Y+9	; 0x09
    2f94:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f96:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	9f 83       	std	Y+7, r25	; 0x07
    2fa2:	8e 83       	std	Y+6, r24	; 0x06
    2fa4:	8e 81       	ldd	r24, Y+6	; 0x06
    2fa6:	9f 81       	ldd	r25, Y+7	; 0x07
    2fa8:	9b 83       	std	Y+3, r25	; 0x03
    2faa:	8a 83       	std	Y+2, r24	; 0x02
    2fac:	8a 81       	ldd	r24, Y+2	; 0x02
    2fae:	9b 81       	ldd	r25, Y+3	; 0x03
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	f1 f7       	brne	.-4      	; 0x2fb0 <Ultrasonic_trigger+0x172>
    2fb4:	9b 83       	std	Y+3, r25	; 0x03
    2fb6:	8a 83       	std	Y+2, r24	; 0x02
    2fb8:	0f c0       	rjmp	.+30     	; 0x2fd8 <Ultrasonic_trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2fba:	69 89       	ldd	r22, Y+17	; 0x11
    2fbc:	7a 89       	ldd	r23, Y+18	; 0x12
    2fbe:	8b 89       	ldd	r24, Y+19	; 0x13
    2fc0:	9c 89       	ldd	r25, Y+20	; 0x14
    2fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	88 8b       	std	Y+16, r24	; 0x10
    2fcc:	88 89       	ldd	r24, Y+16	; 0x10
    2fce:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2fd0:	89 81       	ldd	r24, Y+1	; 0x01
    2fd2:	8a 95       	dec	r24
    2fd4:	f1 f7       	brne	.-4      	; 0x2fd2 <Ultrasonic_trigger+0x194>
    2fd6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID, ULTRASONIC_TRIGGER_PIN_ID, LOGIC_LOW);
    2fd8:	83 e0       	ldi	r24, 0x03	; 3
    2fda:	67 e0       	ldi	r22, 0x07	; 7
    2fdc:	40 e0       	ldi	r20, 0x00	; 0
    2fde:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
}
    2fe2:	68 96       	adiw	r28, 0x18	; 24
    2fe4:	0f b6       	in	r0, 0x3f	; 63
    2fe6:	f8 94       	cli
    2fe8:	de bf       	out	0x3e, r29	; 62
    2fea:	0f be       	out	0x3f, r0	; 63
    2fec:	cd bf       	out	0x3d, r28	; 61
    2fee:	cf 91       	pop	r28
    2ff0:	df 91       	pop	r29
    2ff2:	08 95       	ret

00002ff4 <Ultrasonic_readDistance>:

uint16 Ultrasonic_readDistance(void)
{
    2ff4:	df 93       	push	r29
    2ff6:	cf 93       	push	r28
    2ff8:	00 d0       	rcall	.+0      	; 0x2ffa <Ultrasonic_readDistance+0x6>
    2ffa:	00 d0       	rcall	.+0      	; 0x2ffc <Ultrasonic_readDistance+0x8>
    2ffc:	cd b7       	in	r28, 0x3d	; 61
    2ffe:	de b7       	in	r29, 0x3e	; 62
	Ultrasonic_trigger();
    3000:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <Ultrasonic_trigger>

	while (g_edgeCount < 2); // wait for both edges to be captured
    3004:	80 91 86 00 	lds	r24, 0x0086
    3008:	82 30       	cpi	r24, 0x02	; 2
    300a:	e0 f3       	brcs	.-8      	; 0x3004 <Ultrasonic_readDistance+0x10>

	g_edgeCount = 0;
    300c:	10 92 86 00 	sts	0x0086, r1

	uint16 timeDifference = g_fallingEdgeTime - g_risingEdgeTime;
    3010:	20 91 89 00 	lds	r18, 0x0089
    3014:	30 91 8a 00 	lds	r19, 0x008A
    3018:	80 91 87 00 	lds	r24, 0x0087
    301c:	90 91 88 00 	lds	r25, 0x0088
    3020:	a9 01       	movw	r20, r18
    3022:	48 1b       	sub	r20, r24
    3024:	59 0b       	sbc	r21, r25
    3026:	ca 01       	movw	r24, r20
    3028:	9c 83       	std	Y+4, r25	; 0x04
    302a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 distance = timeDifference / 58;  // Convert to cm (for 8MHz, prescaler 8)
    302c:	8b 81       	ldd	r24, Y+3	; 0x03
    302e:	9c 81       	ldd	r25, Y+4	; 0x04
    3030:	2a e3       	ldi	r18, 0x3A	; 58
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	b9 01       	movw	r22, r18
    3036:	0e 94 53 18 	call	0x30a6	; 0x30a6 <__udivmodhi4>
    303a:	cb 01       	movw	r24, r22
    303c:	9a 83       	std	Y+2, r25	; 0x02
    303e:	89 83       	std	Y+1, r24	; 0x01

	return distance;
    3040:	89 81       	ldd	r24, Y+1	; 0x01
    3042:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	cf 91       	pop	r28
    304e:	df 91       	pop	r29
    3050:	08 95       	ret

00003052 <Ultrasonic_edgeProcessing>:

void Ultrasonic_edgeProcessing(void)
{
    3052:	df 93       	push	r29
    3054:	cf 93       	push	r28
    3056:	cd b7       	in	r28, 0x3d	; 61
    3058:	de b7       	in	r29, 0x3e	; 62
	if (g_edgeCount == 0)
    305a:	80 91 86 00 	lds	r24, 0x0086
    305e:	88 23       	and	r24, r24
    3060:	69 f4       	brne	.+26     	; 0x307c <Ultrasonic_edgeProcessing+0x2a>
	{
		g_risingEdgeTime = ICU_getInputCaptureValue();
    3062:	0e 94 87 0a 	call	0x150e	; 0x150e <ICU_getInputCaptureValue>
    3066:	90 93 88 00 	sts	0x0088, r25
    306a:	80 93 87 00 	sts	0x0087, r24
		ICU_setEdgeDetectionType(FALLING);
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <ICU_setEdgeDetectionType>
		g_edgeCount = 1;
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	80 93 86 00 	sts	0x0086, r24
    307a:	12 c0       	rjmp	.+36     	; 0x30a0 <Ultrasonic_edgeProcessing+0x4e>
	}
	else if (g_edgeCount == 1)
    307c:	80 91 86 00 	lds	r24, 0x0086
    3080:	81 30       	cpi	r24, 0x01	; 1
    3082:	71 f4       	brne	.+28     	; 0x30a0 <Ultrasonic_edgeProcessing+0x4e>
	{
		g_fallingEdgeTime = ICU_getInputCaptureValue();
    3084:	0e 94 87 0a 	call	0x150e	; 0x150e <ICU_getInputCaptureValue>
    3088:	90 93 8a 00 	sts	0x008A, r25
    308c:	80 93 89 00 	sts	0x0089, r24
		ICU_clearTimerValue();
    3090:	0e 94 92 0a 	call	0x1524	; 0x1524 <ICU_clearTimerValue>
		ICU_setEdgeDetectionType(RAISING);
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <ICU_setEdgeDetectionType>
		g_edgeCount = 2;
    309a:	82 e0       	ldi	r24, 0x02	; 2
    309c:	80 93 86 00 	sts	0x0086, r24
	}
}
    30a0:	cf 91       	pop	r28
    30a2:	df 91       	pop	r29
    30a4:	08 95       	ret

000030a6 <__udivmodhi4>:
    30a6:	aa 1b       	sub	r26, r26
    30a8:	bb 1b       	sub	r27, r27
    30aa:	51 e1       	ldi	r21, 0x11	; 17
    30ac:	07 c0       	rjmp	.+14     	; 0x30bc <__udivmodhi4_ep>

000030ae <__udivmodhi4_loop>:
    30ae:	aa 1f       	adc	r26, r26
    30b0:	bb 1f       	adc	r27, r27
    30b2:	a6 17       	cp	r26, r22
    30b4:	b7 07       	cpc	r27, r23
    30b6:	10 f0       	brcs	.+4      	; 0x30bc <__udivmodhi4_ep>
    30b8:	a6 1b       	sub	r26, r22
    30ba:	b7 0b       	sbc	r27, r23

000030bc <__udivmodhi4_ep>:
    30bc:	88 1f       	adc	r24, r24
    30be:	99 1f       	adc	r25, r25
    30c0:	5a 95       	dec	r21
    30c2:	a9 f7       	brne	.-22     	; 0x30ae <__udivmodhi4_loop>
    30c4:	80 95       	com	r24
    30c6:	90 95       	com	r25
    30c8:	bc 01       	movw	r22, r24
    30ca:	cd 01       	movw	r24, r26
    30cc:	08 95       	ret

000030ce <__prologue_saves__>:
    30ce:	2f 92       	push	r2
    30d0:	3f 92       	push	r3
    30d2:	4f 92       	push	r4
    30d4:	5f 92       	push	r5
    30d6:	6f 92       	push	r6
    30d8:	7f 92       	push	r7
    30da:	8f 92       	push	r8
    30dc:	9f 92       	push	r9
    30de:	af 92       	push	r10
    30e0:	bf 92       	push	r11
    30e2:	cf 92       	push	r12
    30e4:	df 92       	push	r13
    30e6:	ef 92       	push	r14
    30e8:	ff 92       	push	r15
    30ea:	0f 93       	push	r16
    30ec:	1f 93       	push	r17
    30ee:	cf 93       	push	r28
    30f0:	df 93       	push	r29
    30f2:	cd b7       	in	r28, 0x3d	; 61
    30f4:	de b7       	in	r29, 0x3e	; 62
    30f6:	ca 1b       	sub	r28, r26
    30f8:	db 0b       	sbc	r29, r27
    30fa:	0f b6       	in	r0, 0x3f	; 63
    30fc:	f8 94       	cli
    30fe:	de bf       	out	0x3e, r29	; 62
    3100:	0f be       	out	0x3f, r0	; 63
    3102:	cd bf       	out	0x3d, r28	; 61
    3104:	09 94       	ijmp

00003106 <__epilogue_restores__>:
    3106:	2a 88       	ldd	r2, Y+18	; 0x12
    3108:	39 88       	ldd	r3, Y+17	; 0x11
    310a:	48 88       	ldd	r4, Y+16	; 0x10
    310c:	5f 84       	ldd	r5, Y+15	; 0x0f
    310e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3110:	7d 84       	ldd	r7, Y+13	; 0x0d
    3112:	8c 84       	ldd	r8, Y+12	; 0x0c
    3114:	9b 84       	ldd	r9, Y+11	; 0x0b
    3116:	aa 84       	ldd	r10, Y+10	; 0x0a
    3118:	b9 84       	ldd	r11, Y+9	; 0x09
    311a:	c8 84       	ldd	r12, Y+8	; 0x08
    311c:	df 80       	ldd	r13, Y+7	; 0x07
    311e:	ee 80       	ldd	r14, Y+6	; 0x06
    3120:	fd 80       	ldd	r15, Y+5	; 0x05
    3122:	0c 81       	ldd	r16, Y+4	; 0x04
    3124:	1b 81       	ldd	r17, Y+3	; 0x03
    3126:	aa 81       	ldd	r26, Y+2	; 0x02
    3128:	b9 81       	ldd	r27, Y+1	; 0x01
    312a:	ce 0f       	add	r28, r30
    312c:	d1 1d       	adc	r29, r1
    312e:	0f b6       	in	r0, 0x3f	; 63
    3130:	f8 94       	cli
    3132:	de bf       	out	0x3e, r29	; 62
    3134:	0f be       	out	0x3f, r0	; 63
    3136:	cd bf       	out	0x3d, r28	; 61
    3138:	ed 01       	movw	r28, r26
    313a:	08 95       	ret

0000313c <itoa>:
    313c:	fb 01       	movw	r30, r22
    313e:	9f 01       	movw	r18, r30
    3140:	e8 94       	clt
    3142:	42 30       	cpi	r20, 0x02	; 2
    3144:	c4 f0       	brlt	.+48     	; 0x3176 <itoa+0x3a>
    3146:	45 32       	cpi	r20, 0x25	; 37
    3148:	b4 f4       	brge	.+44     	; 0x3176 <itoa+0x3a>
    314a:	4a 30       	cpi	r20, 0x0A	; 10
    314c:	29 f4       	brne	.+10     	; 0x3158 <itoa+0x1c>
    314e:	97 fb       	bst	r25, 7
    3150:	1e f4       	brtc	.+6      	; 0x3158 <itoa+0x1c>
    3152:	90 95       	com	r25
    3154:	81 95       	neg	r24
    3156:	9f 4f       	sbci	r25, 0xFF	; 255
    3158:	64 2f       	mov	r22, r20
    315a:	77 27       	eor	r23, r23
    315c:	0e 94 53 18 	call	0x30a6	; 0x30a6 <__udivmodhi4>
    3160:	80 5d       	subi	r24, 0xD0	; 208
    3162:	8a 33       	cpi	r24, 0x3A	; 58
    3164:	0c f0       	brlt	.+2      	; 0x3168 <itoa+0x2c>
    3166:	89 5d       	subi	r24, 0xD9	; 217
    3168:	81 93       	st	Z+, r24
    316a:	cb 01       	movw	r24, r22
    316c:	00 97       	sbiw	r24, 0x00	; 0
    316e:	a1 f7       	brne	.-24     	; 0x3158 <itoa+0x1c>
    3170:	16 f4       	brtc	.+4      	; 0x3176 <itoa+0x3a>
    3172:	5d e2       	ldi	r21, 0x2D	; 45
    3174:	51 93       	st	Z+, r21
    3176:	10 82       	st	Z, r1
    3178:	c9 01       	movw	r24, r18
    317a:	0c 94 bf 18 	jmp	0x317e	; 0x317e <strrev>

0000317e <strrev>:
    317e:	dc 01       	movw	r26, r24
    3180:	fc 01       	movw	r30, r24
    3182:	67 2f       	mov	r22, r23
    3184:	71 91       	ld	r23, Z+
    3186:	77 23       	and	r23, r23
    3188:	e1 f7       	brne	.-8      	; 0x3182 <strrev+0x4>
    318a:	32 97       	sbiw	r30, 0x02	; 2
    318c:	04 c0       	rjmp	.+8      	; 0x3196 <strrev+0x18>
    318e:	7c 91       	ld	r23, X
    3190:	6d 93       	st	X+, r22
    3192:	70 83       	st	Z, r23
    3194:	62 91       	ld	r22, -Z
    3196:	ae 17       	cp	r26, r30
    3198:	bf 07       	cpc	r27, r31
    319a:	c8 f3       	brcs	.-14     	; 0x318e <strrev+0x10>
    319c:	08 95       	ret

0000319e <_exit>:
    319e:	f8 94       	cli

000031a0 <__stop_program>:
    31a0:	ff cf       	rjmp	.-2      	; 0x31a0 <__stop_program>
